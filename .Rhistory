else if(y[i] < -0){
z[i] <- 2
}
else if(y[i] < 1.1) {
z[i] <- 3
}
else{
z[i] <- 4
}
}
#Look to see how it behaves
plot(x, z)
plot(x,y)
#plot(1:n, z)
#par(mfrow=c(2,1))
#--------------------------------------------------------
#Try just ordinal
#Change gammas around
code <- nimbleCode({
beta1 ~ dnorm(0, sd = 200)
beta2 ~ dnorm(0, sd = 200)
tau ~ dunif(0,100)
sigma ~ dgamma(2, .5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,1)
alpha4 ~ dnorm(0,1)
gam[1] <- -9999999
gam[2] <- 0
gam[3] <- exp(alpha3)
gam[4] <- exp(alpha4) + gam[3]
gam[5] <- 9999999
for(i in 1:n){
mu[i] <- U[i] + (beta1 * x1[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2*x1[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i])/sigma) - iprobit((gam[j]-mu[i])/sigma)
}
}
})
# Setting Values
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
x1 <- x
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
constants <- list(n = n, x1 = x1, mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2)
gaminit <- c(-2, 0, exp(0), exp(1) + exp(0),  5)
y1 <- runif(length(z), min=gaminit[z], max=gaminit[z+1])
betainit <- c(solve(t(x1)%*%x1)%*%t(x1)%*%y1)
inits <- list(beta1 = betainit, beta2 = betainit, tau = 50.1, sigma=2, alpha3 = 0, alpha4 = 1,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 2, niter = 80000,thin=8,
summary = TRUE,
monitors = c('beta1', "beta2", "alpha3","alpha4", "tau"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
mcmc.out$summary
mcmc.chains <- mcmc(mcmc.out$samples)
mcmc.sims <- mcmc(as.matrix(mcmc.out$samples))
plot(mcmc.sims)
rhat = gelman.diag(mcmc.simssims)
rhat = gelman.diag(mcmc.sims)
# Model Summary
mcmc.out$summary
mcmc.chains <- mcmc(mcmc.out$samples)
mcmc.sims <- mcmc(as.matrix(mcmc.out$samples))
plot(mcmc.sims)
rhat = gelman.diag(mcmc.sims)
geweke.diag(mcmc.sims)
raftery.diag(mcmc.sims)
effectiveSize(mcmc.sims)
autocorr(mcmc.sims)
mcmc.out$WAIC
rhat = gelman.diag(mcmc.out$samples)
rhat$psrf
rhat = gelman.diag(mcmc.chains)
rhat$psrf
library(tidyverse)
library(lubridate)
library(coda)
library(R2jags)
library(MASS)
library(nimble, warn.conflicts = FALSE)
## Get 6 counties data ready to be modeled
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
covid_data <- initial_data[,c(5,11,23, 24)]
albany <- covid_data[covid_data$id=='ID1903',]
queens <- covid_data[covid_data$id=='ID1944',]
newyork <- covid_data[covid_data$id=='ID1933',]
bronx <- covid_data[covid_data$id=='ID1905',]
wyoming <- covid_data[covid_data$id=='ID1965',]
niagara <- covid_data[covid_data$id=='ID1934',]
covidlist <- list(albany, queens, newyork, bronx, wyoming, niagara)
### For my ordinal model exploration, I will use Albany
code <- nimbleCode({
beta1 ~ dnorm(0, sd = 200)
beta2 ~ dnorm(0, sd = 200)
tau ~ dunif(5, 15)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] + (beta1 * t[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2*t[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
t <- 1:n
z <- albany$category
new_z <- z[1:14]
new_n <- length(new_z)
# new_y <- y[-c(15, 27:39, 66:80)]
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,new_z[i]] <- 1
}
new_t <- 1:new_n
constants <- list(n = new_n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, t = t)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1 = betainit, beta2 = betainit, tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1', "beta2", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
initial_data
view(initial_data)
covid_data <- initial_data[,c(5, 11, 22, 23, 24)]
albany <- covid_data[covid_data$id=='ID1903',]
deaths <- albany$prev_log_new_death
deaths
# Can loop through all of this if you want to simulate values for multiple locations
x <- runif(n)-0.5 # covariate (centered at 0)
distmat <- as.matrix(dist(1:n)) # distance in time
x <- sort(x)
beta1 <- 2 #slope
beta2 <- 8
y <- mvrnorm(1, beta1*x[1:50], diag(50))
y2 <- mvrnorm(1, beta2*x[51:100], diag(50))
y <- c(y,y2)
z <- rep(0, 100)
for(i in 1:100){
if(y[i]< -1){
z[i] <- 1
}
else if(y[i] < -0){
z[i] <- 2
}
else if(y[i] < 1.1) {
z[i] <- 3
}
else{
z[i] <- 4
}
}
y <- c(y,y2)
y <- mvrnorm(1, beta1*x[1:50], diag(50))
y2 <- mvrnorm(1, beta2*x[51:100], diag(50))
y <- c(y,y2)
z <- rep(0, 100)
for(i in 1:100){
if(y[i]< -1){
z[i] <- 1
}
else if(y[i] < -0){
z[i] <- 2
}
else if(y[i] < 1.1) {
z[i] <- 3
}
else{
z[i] <- 4
}
}
y
n <- 100 #number of times
# Can loop through all of this if you want to simulate values for multiple locations
x <- runif(n)-0.5 # covariate (centered at 0)
distmat <- as.matrix(dist(1:n)) # distance in time
x <- sort(x)
beta1 <- 2 #slope
beta2 <- 8
y <- mvrnorm(1, beta1*x[1:50], diag(50))
y2 <- mvrnorm(1, beta2*x[51:100], diag(50))
y <- c(y,y2)
z <- rep(0, 100)
for(i in 1:100){
if(y[i]< -1){
z[i] <- 1
}
else if(y[i] < -0){
z[i] <- 2
}
else if(y[i] < 1.1) {
z[i] <- 3
}
else{
z[i] <- 4
}
}
#Look to see how it behaves
plot(x, z)
plot(x, z)
plot(x, y)
# Setting Values
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
deaths <- albany$prev_log_new_death
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
t <- 1:n
plot(t, y)
# new_y <- y[-c(15, 27:39, 66:80)]
z2 <- matrix(0, nrow=n, ncol=4)
z <- albany$category
plot(t, z)
plot(y, deaths)
plot(deaths, y)
plot(t, deaths)
lines(y)
plot(t, y)
lines(deaths)
lines(deaths*100)
plot(t, y)
lines(exp(deaths))
## Get 6 counties data ready to be modeled
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
covid_data <- initial_data[,c(5, 11, 22, 23, 24)]
albany <- covid_data[covid_data$id=='ID1903',]
queens <- covid_data[covid_data$id=='ID1944',]
newyork <- covid_data[covid_data$id=='ID1933',]
bronx <- covid_data[covid_data$id=='ID1905',]
wyoming <- covid_data[covid_data$id=='ID1965',]
niagara <- covid_data[covid_data$id=='ID1934',]
covidlist <- list(albany, queens, newyork, bronx, wyoming, niagara)
### For my ordinal model exploration, I will use Albany
code <- nimbleCode({
beta1 ~ dnorm(0, sd = 200)
beta2 ~ dnorm(0, sd = 200)
tau ~ dunif(5, 15)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1 * t[i] + beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2 * t[i] + beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
deaths <- albany$prev_log_new_death
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
t <- 1:n
z <- albany$category
new_z <- z[1:14]
new_n <- length(new_z)
# new_y <- y[-c(15, 27:39, 66:80)]
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,new_z[i]] <- 1
}
new_t <- 1:new_n
constants <- list(n = new_n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, t = t, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1 = betainit, beta2 = betainit, beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1', "beta2", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
mcmc.out$summary
exp(alpha3)
exp(2.32)
exp(1.06)
## Get 6 counties data ready to be modeled
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
covid_data <- initial_data[,c(5, 11, 22, 23, 24)]
albany <- covid_data[covid_data$id=='ID1903',]
queens <- covid_data[covid_data$id=='ID1944',]
newyork <- covid_data[covid_data$id=='ID1933',]
bronx <- covid_data[covid_data$id=='ID1905',]
wyoming <- covid_data[covid_data$id=='ID1965',]
niagara <- covid_data[covid_data$id=='ID1934',]
covidlist <- list(albany, queens, newyork, bronx, wyoming, niagara)
### For my ordinal model exploration, I will use Albany
code <- nimbleCode({
beta1 ~ dnorm(0, sd = 200)
beta2 ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1 * t[i] + beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2 * t[i] + beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
deaths <- albany$prev_log_new_death
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
t <- 1:n
z <- albany$category
new_z <- z[1:14]
new_n <- length(new_z)
# new_y <- y[-c(15, 27:39, 66:80)]
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
new_t <- 1:new_n
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, t = t, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1 = betainit, beta2 = betainit, beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1', "beta2", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
mcmc.out$summary
## Get 6 counties data ready to be modeled
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
covid_data <- initial_data[,c(5, 11, 22, 23, 24)]
albany <- covid_data[covid_data$id=='ID1903',]
queens <- covid_data[covid_data$id=='ID1944',]
newyork <- covid_data[covid_data$id=='ID1933',]
bronx <- covid_data[covid_data$id=='ID1905',]
wyoming <- covid_data[covid_data$id=='ID1965',]
niagara <- covid_data[covid_data$id=='ID1934',]
covidlist <- list(albany, queens, newyork, bronx, wyoming, niagara)
### For my ordinal model exploration, I will use Albany
code <- nimbleCode({
beta1 ~ dnorm(0, sd = 200)
beta2 ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
deaths <- albany$prev_log_new_death
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
t <- 1:n
z <- albany$category
new_z <- z[1:14]
new_n <- length(new_z)
# new_y <- y[-c(15, 27:39, 66:80)]
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
new_t <- 1:new_n
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1death', "beta2death", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
