ylab = "Tau")
tauOrd2 <- mcmc.outOrd$samples$chain2[, 20]
plot(as.matrix(tauOrd2), type = 'l',
main = "Tau, Ordinal, Chain 2",
ylab = "Tau")
dev.off()
gsub(" ", "", counties[jj])
file <- paste(county, ".Rdata")
county <- gsub(" ", "", counties[jj])
file <- paste(county, ".Rdata")
file <- paste(county, ".Rdata", sep = "")
library(tidyverse)
library(nimble)
library(coda)
#Load the data
dat <- read.csv("currentjoineddata.csv")
counties <- unique(dat$Recip_County)
n.counties <- 1
tausave <- matrix(0, ncol=6, nrow=n.counties)
beta1deathsave <- matrix(0, ncol=6, nrow = n.counties)
beta2deathsave <- matrix(0, ncol=6, nrow = n.counties)
beta1vaxsave <- matrix(0, ncol=6, nrow = n.counties)
beta2vaxsave <- matrix(0, ncol=6, nrow = n.counties)
phiUsave <- matrix(0, ncol=6, nrow = n.counties)
phiVsave <- matrix(0, ncol=6, nrow = n.counties)
phiWsave <- matrix(0, ncol=6, nrow = n.counties)
sigmasave <- matrix(0, ncol=6, nrow=n.counties)
gamma3save <- matrix(0, ncol=3, nrow=n.counties)
gamma4save <- matrix(0, ncol=3, nrow=n.counties)
waic <- matrix(0, ncol = 2, nrow = n.counties)
gelman <- vector('list', length = n.counties)
raftery <- vector('list', length = n.counties)
jj <- 23
thiscounty <- counties[jj]
#Select just one county
this <- dat %>%
subset(Recip_County==thiscounty) %>%
select(Date, category, prev_log_new_death, Administered_Dose1_Pop_Pct.x, log_new_death,
new_vax_this_week, new_cases_per_100k)
###############
# Create data for Nimble Model
# Note: Using rev() bc data appear to be in reverse time order so I'm putting them back in chronological order
z <- rev(this$category)
x1 <- rev(this$prev_log_new_death)
x2 <- rev(this$Administered_Dose1_Pop_Pct.x)
x2[1] <- 0 #no new vaccinations before the first date
n <- length(z)
y <- rev(this$new_cases_per_100k)
###############
#Nimble Ordinal Model
codeOrd <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
beta1vax ~ dnorm(0, sd = 200)
beta2vax ~ dnorm(0, sd = 200)
tau ~ dunif(5,n-5)
sigma ~ dgamma(1, .1)
alpha3 ~ dnorm(0,1)
alpha4 ~ dnorm(0,1)
gam[1] <- -9999999
gam[2] <- 0
gam[3] <- exp(alpha3)
gam[4] <- exp(alpha4) + gam[3]
gam[5] <- 9999999
phiU ~ dunif(0,20)
phiW ~ dunif(0,20)
phiV ~ dunif(0,20)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 1)
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholW[1:n,1:n], prec_param=1)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholV[1:n,1:n], prec_param=1)
beta1deathstar <- beta1death / sigma
beta2deathstar <- beta2death / sigma
beta1vaxstar <- beta1vax / sigma
beta2vaxstar <- beta2vax / sigma
for(i in 1:n){
mu[i] <- U[i] + (beta1death * x1[i] + beta1vax*x2[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * x1[i] +beta2vax*x2[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i])/sigma) - iprobit((gam[j]-mu[i])/sigma)
}
}
})
#Setting Values
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
constantsOrd <- list(n = n, x1 = x1,x2=x2, mu_zero = mu_zero)
dataOrd <- list(z = z2, distmat=distmat)
gaminit <- c(-2, 0, exp(0), exp(1) + exp(0),  5)
y1 <- runif(length(z), min=gaminit[z], max=gaminit[z+1])
xmat <- cbind(x1, x2)
betainit <- c(solve(t(xmat)%*%xmat)%*%t(xmat)%*%y1)
initsOrd <- list(beta1death = betainit[1], beta2death = betainit[1],
beta1vax=betainit[2], beta2vax=betainit[2], tau = n/2+.1,
sigma=1, alpha3 = 0, alpha4 = 1, phiU=1, phiW=1, phiV=1, U=mu_zero,
W=mu_zero, V=mu_zero)
modelOrd <- nimbleModel(codeOrd, constants = constantsOrd, data = dataOrd, inits = initsOrd)
#Compile Model, run MCMC
cmodelOrd = compileNimble(modelOrd)
mcmc.outOrd <- nimbleMCMC(code = codeOrd, constants = constantsOrd,
data = dataOrd, inits = initsOrd, nburnin=5000,
nchains = 2, niter = 100000,thin=5,
summary = TRUE,
monitors = c('beta1death', "beta2death", "beta1vax", "beta2vax",
"alpha3","alpha4", "tau", "phiU", "phiV", "phiW", "sigma",
"beta1deathstar", "beta2deathstar",
"beta1vaxstar", "beta2vaxstar",
"gam"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
#Model Summary
#mcmc.outOrd$summary
tausave[jj,1:3] <- mcmc.outOrd$summary$all.chains[20,c(1,4,5)]
beta1deathsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[4, c(1, 4, 5)]
beta2deathsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[8, c(1, 4, 5)]
beta1vaxsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[6, c(1, 4, 5)]
beta2vaxsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[10, c(1, 4, 5)]
phiUsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[16, c(1, 4, 5)]
phiVsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[17, c(1, 4, 5)]
phiWsave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[18, c(1, 4, 5)]
sigmasave[jj, 1:3] <- mcmc.outOrd$summary$all.chains[19, c(1, 4, 5)]
gamma3save[jj, 1:3] <- mcmc.outOrd$summary$all.chains[13, c(1, 2, 3)]
gamma4save[jj, 1:3] <- mcmc.outOrd$summary$all.chains[14, c(1, 2, 3)]
waic[jj, 1] <- mcmc.outOrd$WAIC$WAIC
# gelman[[jj]][[1]] <- gelman.diag(mcmc.outOrd$samples)
raftery[[jj]][[1]] <- raftery.diag(mcmc.outOrd$samples)
###############################
# Compare the change point when we estimate with continuous response
codeCont <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
beta1vax ~ dnorm(0, sd = 200)
beta2vax ~ dnorm(0, sd = 200)
tau ~ dunif(5,n-5)
sigma ~ dgamma(1, .1)
phiU ~ dunif(0,20)
phiW ~ dunif(0,20)
phiV ~ dunif(0,20)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 1)
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholW[1:n,1:n], prec_param=1)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholV[1:n,1:n], prec_param=1)
for(i in 1:n){
mu[i] <- U[i] + (beta1death * x1[i] + beta1vax*x2[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * x1[i] +beta2vax*x2[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
y[i] ~ dnorm(mu[i], sigma)
}
})
# Setting Values
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
constantsCont <- list(n = n, x1 = x1,x2=x2, mu_zero = mu_zero)
dataCont <- list(y = y, distmat=distmat)
xmat <- cbind(x1, x2)
betainit <- c(solve(t(xmat)%*%xmat)%*%t(xmat)%*%y)
initsCont <- list(beta1death = betainit[1], beta2death = betainit[1],
beta1vax=betainit[2], beta2vax=betainit[2], tau = n/2+.1,
sigma=1, phiU=1, phiW=1, phiV=1, U=mu_zero,
W=mu_zero, V=mu_zero)
modelCont <- nimbleModel(codeCont, constants = constantsCont, data = dataCont, inits = initsCont)
# Compile Model, run MCMC
cmodelCont = compileNimble(modelCont)
mcmc.outCont <- nimbleMCMC(code = codeCont, constants = constantsCont,
data = dataCont, inits = initsCont, nburnin=5000,
nchains = 2, niter = 100000,thin=5,
summary = TRUE,
monitors = c('beta1death', "beta2death", "beta1vax", "beta2vax",
"tau", "phiU", "phiV", "phiW", "sigma"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
#mcmc.outCont$summary
tausave[jj,4:6] <- mcmc.outCont$summary$all.chains[9,c(1,4,5)]
beta1deathsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[1, c(1, 4, 5)]
beta2deathsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[3, c(1, 4, 5)]
beta1vaxsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[2, c(1, 4, 5)]
beta2vaxsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[4, c(1, 4, 5)]
phiUsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[5, c(1, 4, 5)]
phiVsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[6, c(1, 4, 5)]
phiWsave[jj, 4:6] <- mcmc.outCont$summary$all.chains[7, c(1, 4, 5)]
sigmasave[jj, 4:6] <- mcmc.outCont$summary$all.chains[8, c(1, 4, 5)]
waic[jj, 2] <- mcmc.outCont$WAIC$WAIC
gelman[[jj]][[2]] <- gelman.diag(mcmc.outCont$samples)
raftery[[jj]][[2]] <- raftery.diag(mcmc.outCont$samples)
print(paste("Finished:", jj))
county <- gsub(" ", "", counties[jj])
file <- paste(county, ".Rdata", sep = "")
save(tausave, beta1deathsave, beta2deathsave, beta1vaxsave, beta2vaxsave,
phiUsave, phiVsave, phiWsave, sigmasave, gamma3save, gamma4save,
waic, gelman, raftery, counties, mcmc.outCont, mcmc.outOrd,
file=file)
title <- paste(counties[jj], "Change Point Trace plots")
png(file = title)
par(mfrow = c(2, 2))
tauCont1 <- mcmc.outCont$samples$chain1[, 9]
plot(as.matrix(tauCont1), type = 'l',
main = "Tau, Continuous, Chain 1",
ylab = "Tau")
tauCont2 <- mcmc.outCont$samples$chain2[,9]
plot(as.matrix(tauCont2), type = 'l',
main = "Tau, Continuous, Chain 2",
ylab = "Tau")
tauOrd1 <- mcmc.outOrd$samples$chain1[, 20]
plot(as.matrix(tauOrd1), type = 'l',
main = "Tau, Ordinal, Chain 1",
ylab = "Tau")
tauOrd2 <- mcmc.outOrd$samples$chain2[, 20]
plot(as.matrix(tauOrd2), type = 'l',
main = "Tau, Ordinal, Chain 2",
ylab = "Tau")
dev.off()
plot(this$new_cases_per_100k)
plot(this$category)
load("/Users/adamiser810/Desktop/Change-point-models/NewCurrentModel.Rdata")
View(gamma4save)
View(gamma3save)
load("/Users/adamiser810/Desktop/Change-point-models/CurrentModel.Rdata")
library(tidyverse)
dat <- read.csv("currentjoineddata.csv")
counties <- unique(dat$Recip_County)
n.counties <- length(counties)
populations <- unique(dat$population)
fipscodes <- read.table(header=F, sep=" ", text="
36001        Albany County
36003        Allegany County
36005        Bronx County
36007        Broome County
36009        Cattaraugus County
36011        Cayuga County
36013        Chautauqua County
36015        Chemung County
36017        Chenango County
36019        Clinton County
36021        Columbia County
36023        Cortland County
36025        Delaware County
36027        Dutchess County
36029        Erie County
36031        Essex County
36033        Franklin County
36035        Fulton County
36037        Genesee County
36039        Greene County
36041        Hamilton County
36043        Herkimer County
36045        Jefferson County
36047        Kings County
36049        Lewis County
36051        Livingston County
36053        Madison County
36055        Monroe County
36057        Montgomery County
36059        Nassau County
36061        NewYork County
36063        Niagara County
36065        Oneida County
36067        Onondaga County
36069        Ontario County
36071        Orange County
36073        Orleans County
36075        Oswego County
36077        Otsego County
36079        Putnam County
36081        Queens County
36083        Rensselaer County
36085        Richmond County
36087        Rockland County
36089        StLawrence County
36091        Saratoga County
36093        Schenectady County
36095        Schoharie County
36097        Schuyler County
36099        Seneca County
36101        Steuben County
36103        Suffolk County
36105        Sullivan County
36107        Tioga County
36109        Tompkins County
36111        Ulster County
36113        Warren County
36115        Washington County
36117        Wayne County
36119        Westchester County
36121        Wyoming County
36123        Yates County
")
fipscodes <- fipscodes[,c(5,13)]
names(fipscodes)=c("fips", "county")
fipscodes[45:50,] <- fipscodes[c(46:50,45),]
df <- data.frame("County"=counties, "Population"=populations,
"ChangePoint_Ord"=tausave[,1],
"ChangePoint_Cont"=tausave[,4],
"ChangePointRange_Ord"=tausave[,3]-tausave[,2],
"ChangePointRange_Cont"=tausave[,6]-tausave[,5],
"Beta1death_Ord"=beta1deathsave[,1],
"Beta2death_Ord"=beta2deathsave[,1],
"Beta1vax_Ord"=beta1vaxsave[,1],
"Beta2vax_Ord"=beta2vaxsave[,1],
"Beta1death_Cont"=beta1deathsave[,4],
"Beta2death_Cont"=beta2deathsave[,4],
"Beta1vax_Cont"=beta1vaxsave[,4],
"Beta2vax_Cont"=beta2vaxsave[,4],
"Beta1deathRange_Ord"=beta1deathsave[,3]-beta1deathsave[,2],
"Beta1deathRange_Cont"=beta1deathsave[,6]-beta1deathsave[,5],
"Beta1vaxRange_Ord"=beta1vaxsave[,3]-beta1vaxsave[,5],
"Beta1vaxRange_Cont"=beta1vaxsave[,6]-beta1vaxsave[,5],
"Beta2deathRange_Ord"=beta2deathsave[,3]-beta2deathsave[,2],
"Beta2deathRange_Cont"=beta2deathsave[,6]-beta2deathsave[,5],
"Beta2vaxRange_Ord"=beta2vaxsave[,3]-beta2vaxsave[,5],
"Beta2vaxRange_Cont"=beta2vaxsave[,6]-beta2vaxsave[,5],
"fips"=fipscodes$fips)
df
df <- data.frame("County"=counties, "Population"=populations,
"ChangePoint_Ord"=tausave[,1],
"ChangePoint_Cont"=tausave[,4],
"ChangePointRange_Ord"=tausave[,3]-tausave[,2],
"ChangePointRange_Cont"=tausave[,6]-tausave[,5],
"Beta1death_Ord"=beta1deathsave[,1],
"Beta2death_Ord"=beta2deathsave[,1],
"Beta1vax_Ord"=beta1vaxsave[,1],
"Beta2vax_Ord"=beta2vaxsave[,1],
"Beta1death_Cont"=beta1deathsave[,4],
"Beta2death_Cont"=beta2deathsave[,4],
"Beta1vax_Cont"=beta1vaxsave[,4],
"Beta2vax_Cont"=beta2vaxsave[,4],
"Beta1deathRange_Ord"=beta1deathsave[,3]-beta1deathsave[,2],
"Beta1deathRange_Cont"=beta1deathsave[,6]-beta1deathsave[,5],
"Beta1vaxRange_Ord"=beta1vaxsave[,3]-beta1vaxsave[,5],
"Beta1vaxRange_Cont"=beta1vaxsave[,6]-beta1vaxsave[,5],
"Beta2deathRange_Ord"=beta2deathsave[,3]-beta2deathsave[,2],
"Beta2deathRange_Cont"=beta2deathsave[,6]-beta2deathsave[,5],
"Beta2vaxRange_Ord"=beta2vaxsave[,3]-beta2vaxsave[,5],
"Beta2vaxRange_Cont"=beta2vaxsave[,6]-beta2vaxsave[,5],
"Gamma3_Ord" = gamma3save[,1],
"Gamma4_Ord" = gamma4save[,1],
"Gamma3Range_Ord" = gamma3save[,3] - gamma3save[,2],
"Gamma4Range_Ord" = gamma4save[,3] - gamma4save[,2],
"fips"=fipscodes$fips)
df
gamma3save
df <- data.frame("County"=counties, "Population"=populations,
"ChangePoint_Ord"=tausave[,1],
"ChangePoint_Cont"=tausave[,4],
"ChangePointRange_Ord"=tausave[,3]-tausave[,2],
"ChangePointRange_Cont"=tausave[,6]-tausave[,5],
"Beta1death_Ord"=beta1deathsave[,1],
"Beta2death_Ord"=beta2deathsave[,1],
"Beta1vax_Ord"=beta1vaxsave[,1],
"Beta2vax_Ord"=beta2vaxsave[,1],
"Beta1death_Cont"=beta1deathsave[,4],
"Beta2death_Cont"=beta2deathsave[,4],
"Beta1vax_Cont"=beta1vaxsave[,4],
"Beta2vax_Cont"=beta2vaxsave[,4],
"Beta1deathRange_Ord"=beta1deathsave[,3]-beta1deathsave[,2],
"Beta1deathRange_Cont"=beta1deathsave[,6]-beta1deathsave[,5],
"Beta1vaxRange_Ord"=beta1vaxsave[,3]-beta1vaxsave[,5],
"Beta1vaxRange_Cont"=beta1vaxsave[,6]-beta1vaxsave[,5],
"Beta2deathRange_Ord"=beta2deathsave[,3]-beta2deathsave[,2],
"Beta2deathRange_Cont"=beta2deathsave[,6]-beta2deathsave[,5],
"Beta2vaxRange_Ord"=beta2vaxsave[,3]-beta2vaxsave[,5],
"Beta2vaxRange_Cont"=beta2vaxsave[,6]-beta2vaxsave[,5],
"Gamma3_Ord" = gamma3save[,1],
"Gamma4_Ord" = gamma4save[,1],
"fips"=fipscodes$fips)
gamma3save
load("/Users/adamiser810/Desktop/Change-point-models/Individual_County_Analysis/AlbanyCounty.Rdata")
mcmc.outOrd$summary
load("/Users/adamiser810/Desktop/Change-point-models/CurrentModel.Rdata")
df <- data.frame("County"=counties, "Population"=populations,
"ChangePoint_Ord"=tausave[,1],
"ChangePoint_Cont"=tausave[,4],
"ChangePointRange_Ord"=tausave[,3]-tausave[,2],
"ChangePointRange_Cont"=tausave[,6]-tausave[,5],
"Beta1death_Ord"=beta1deathsave[,1],
"Beta2death_Ord"=beta2deathsave[,1],
"Beta1vax_Ord"=beta1vaxsave[,1],
"Beta2vax_Ord"=beta2vaxsave[,1],
"Beta1death_Cont"=beta1deathsave[,4],
"Beta2death_Cont"=beta2deathsave[,4],
"Beta1vax_Cont"=beta1vaxsave[,4],
"Beta2vax_Cont"=beta2vaxsave[,4],
"Beta1deathRange_Ord"=beta1deathsave[,3]-beta1deathsave[,2],
"Beta1deathRange_Cont"=beta1deathsave[,6]-beta1deathsave[,5],
"Beta1vaxRange_Ord"=beta1vaxsave[,3]-beta1vaxsave[,5],
"Beta1vaxRange_Cont"=beta1vaxsave[,6]-beta1vaxsave[,5],
"Beta2deathRange_Ord"=beta2deathsave[,3]-beta2deathsave[,2],
"Beta2deathRange_Cont"=beta2deathsave[,6]-beta2deathsave[,5],
"Beta2vaxRange_Ord"=beta2vaxsave[,3]-beta2vaxsave[,5],
"Beta2vaxRange_Cont"=beta2vaxsave[,6]-beta2vaxsave[,5],
"Gamma3_Ord" = gamma3save[,1],
"Gamma4_Ord" = gamma4save[,1],
"fips"=fipscodes$fips)
# Map of Gammas
plot_usmap(data = df, values = "Gamma3_Ord", include = "New York") + scale_fill_continuous(name = "Gamma3_Ord") +
theme(legend.position = 'right') +
ggtile("Gamma 3")
library(ggplot2)
library(usmap)
library(gridExtra)
# Map of Gammas
plot_usmap(data = df, values = "Gamma3_Ord", include = "New York") + scale_fill_continuous(name = "Gamma3_Ord") +
theme(legend.position = 'right') +
ggtile("Gamma 3")
library(ggplot2)
# Map of Gammas
plot_usmap(data = df, values = "Gamma3_Ord", include = "New York") + scale_fill_continuous(name = "Gamma3_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 3")
plot_usmap(data = df, values = "Gamma4_Ord", include = "New York") + scale_fill_continuous(name = "Gamma4_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 4")
gamma3_nyplot <- plot_usmap(data = df, values = "Gamma3_Ord", include = "New York") + scale_fill_continuous(name = "Gamma3_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 3")
gamma4_nyplot <- plot_usmap(data = df, values = "Gamma4_Ord", include = "New York") + scale_fill_continuous(name = "Gamma4_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 4")
grid.arrange(gamma3_nyplot, gamma4_nyplot, ncol = 2)
view(df)
df[c(1,4,8,14,15,22,24,26:28,30,
32:38,40:42,45:47,52,54:60),
"Urban/Rural"] <- "Urban"
df
ifelse(df$Urban/Rural == "Urban",
df$Urban/Rural = "Urban",
df$Urban/Rural = "Rural")
df <- data.frame("County"=counties, "Population"=populations,
"ChangePoint_Ord"=tausave[,1],
"ChangePoint_Cont"=tausave[,4],
"ChangePointRange_Ord"=tausave[,3]-tausave[,2],
"ChangePointRange_Cont"=tausave[,6]-tausave[,5],
"Beta1death_Ord"=beta1deathsave[,1],
"Beta2death_Ord"=beta2deathsave[,1],
"Beta1vax_Ord"=beta1vaxsave[,1],
"Beta2vax_Ord"=beta2vaxsave[,1],
"Beta1death_Cont"=beta1deathsave[,4],
"Beta2death_Cont"=beta2deathsave[,4],
"Beta1vax_Cont"=beta1vaxsave[,4],
"Beta2vax_Cont"=beta2vaxsave[,4],
"Beta1deathRange_Ord"=beta1deathsave[,3]-beta1deathsave[,2],
"Beta1deathRange_Cont"=beta1deathsave[,6]-beta1deathsave[,5],
"Beta1vaxRange_Ord"=beta1vaxsave[,3]-beta1vaxsave[,5],
"Beta1vaxRange_Cont"=beta1vaxsave[,6]-beta1vaxsave[,5],
"Beta2deathRange_Ord"=beta2deathsave[,3]-beta2deathsave[,2],
"Beta2deathRange_Cont"=beta2deathsave[,6]-beta2deathsave[,5],
"Beta2vaxRange_Ord"=beta2vaxsave[,3]-beta2vaxsave[,5],
"Beta2vaxRange_Cont"=beta2vaxsave[,6]-beta2vaxsave[,5],
"Gamma3_Ord" = gamma3save[,1],
"Gamma4_Ord" = gamma4save[,1],
"fips"=fipscodes$fips)
df[c(1,4,8,14,15,22,24,26:28,30,
32:38,40:42,45:47,52,54:60),
"Urban_Rural"] <- "Urban"
ifelse(df$Urban_Rural == "Urban",
df$Urban_Rural = "Urban",
df$Urban_Rural = "Rural")
df[c(2:3,5:7,9:13,16:21,23,25,29,
31,39,43:44,48:51,53,61:62),
"Urban_Rural"] <- "Rural"
view(df)
mean(df[df$Urban_Rural == "Urban",]$ChangePoint_Ord)
df[df$Urban_Rural == "Urban",]
mean(df[df$Urban_Rural == "Urban",]$ChangePoint_Ord)
mean(df[df$Urban_Rural == "Rural",]$ChangePoint_Ord)
mean(df[df$Urban_Rural == "Urban",]$ChangePoint_Ord)
mean(df[df$Urban_Rural == "Rural",]$ChangePoint_Ord)
mean(df[df$Urban_Rural == "Urban",]$ChangePointRange_Ord)
mean(df[df$Urban_Rural == "Rural",]$ChangePointRange_Ord)
# Relationship between population and change point
plot(df$ChangePoint_Ord, log(df$Population),
ylab = "log Population",
xlab = "Change Point (Ordinal Response)",
main = "Population vs. Change Point")
plot(df[df$Urban_Rural == "Urban",]$ChangePoint_Ord, log(df$Population))
urban_df <- df[df$Urban_Rural == "Urban",]
rural_df <- df[df$Urban_Rural == "Rural",]
plot(urban_df$ChangePoint_Ord, log(urban_df$Population))
plot(rural_df$ChangePoint_Ord, log(rural_df$Population)
plot(rural_df$ChangePoint_Ord, log(rural_df$Population))
plot(rural_df$ChangePoint_Ord, log(rural_df$Population))
plot(urban_df$ChangePoint_Ord, log(urban_df$Population))
plot(rural_df$ChangePoint_Ord, log(rural_df$Population))
plot(urban_df$ChangePoint_Ord, log(urban_df$Population))
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(urban_df$ChangePoint_Ord, log(urban_df$Population))
plot(rural_df$ChangePoint_Ord, log(rural_df$Population))
par(mfrow = c(1, 2))
plot(urban_df$ChangePoint_Ord, log(urban_df$Population),
ylab = "log Population",
xlab = "Change Point (Ordinal)",
main = "Urban: Population vs Change Point ")
plot(rural_df$ChangePoint_Ord, log(rural_df$Population),
ylab = "log Population",
xlab = "Change Point (Ordinal)",
main = "Rural: Population vs Change Point ")
gamma3_nyplot <- plot_usmap(data = df, values = "Gamma3_Ord", include = "New York") + scale_fill_continuous(name = "Gamma3_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 3")
gamma4_nyplot <- plot_usmap(data = df, values = "Gamma4_Ord", include = "New York") + scale_fill_continuous(name = "Gamma4_Ord") +
theme(legend.position = 'right') +
ggtitle("Gamma 4")
grid.arrange(gamma3_nyplot, gamma4_nyplot, ncol = 2)
