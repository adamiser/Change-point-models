library(tidyverse)
library(nimble)
library(coda)
#Load the data
dat <- read.csv("currentjoineddata.csv")
counties <- unique(dat$Recip_County)
n.counties <- length(counties)
#Load the data
dat <- read.csv("currentjoineddata.csv")
counties <- unique(dat$Recip_County)
n.counties <- length(counties)
n.counties
jj <- 2
png(file = title)
title <- paste(counties[jj], "TracePlots", sep = "")
county <- gsub(" ", "", counties[jj])
title <- paste(county, "TracePlots", sep = "")
county <- gsub(" ", "", counties[jj])
file <- paste(county, ".Rdata", sep = "")
print(jj)
for (jj in c(1, 5, 10, 15, 20)) {
print(jj)
}
library(tidyverse)
library(nimble)
library(coda)
#Load the data
dat <- read.csv("currentjoineddata.csv")
counties <- unique(dat$Recip_County)
n.counties <- length(counties)
for (jj in c(4, 15, 6, 38, 22, 16, 27, 51, 60, 53)) {
thiscounty <- counties[jj]
#Select just one county
this <- dat %>%
subset(Recip_County==thiscounty) %>%
select(Date, category, prev_log_new_death, Administered_Dose1_Pop_Pct.x, log_new_death,
new_vax_this_week, new_cases_per_100k)
###############
# Create data for Nimble Model
# Note: Using rev() bc data appear to be in reverse time order so I'm putting them back in chronological order
z <- rev(this$category)
x1 <- rev(this$prev_log_new_death)
x2 <- rev(this$Administered_Dose1_Pop_Pct.x)
x2[1] <- 0 #no new vaccinations before the first date
n <- length(z)
y <- rev(this$new_cases_per_100k)
###############
#Nimble Ordinal Model
codeOrd <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
beta1vax ~ dnorm(0, sd = 200)
beta2vax ~ dnorm(0, sd = 200)
tau ~ dunif(5,n-5)
sigma ~ dgamma(1, .1)
alpha3 ~ dnorm(0,1)
alpha4 ~ dnorm(0,1)
gam[1] <- -9999999
gam[2] <- 0
gam[3] <- exp(alpha3)
gam[4] <- exp(alpha4) + gam[3]
gam[5] <- 9999999
phiU ~ dunif(0,20)
phiW ~ dunif(0,20)
phiV ~ dunif(0,20)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 1)
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholW[1:n,1:n], prec_param=1)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholV[1:n,1:n], prec_param=1)
beta1deathstar <- beta1death / sigma
beta2deathstar <- beta2death / sigma
beta1vaxstar <- beta1vax / sigma
beta2vaxstar <- beta2vax / sigma
for(i in 1:n){
mu[i] <- U[i] + (beta1death * x1[i] + beta1vax*x2[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * x1[i] +beta2vax*x2[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i])/sigma) - iprobit((gam[j]-mu[i])/sigma)
}
}
})
#Setting Values
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
z2 <- matrix(0, nrow=n, ncol=4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
constantsOrd <- list(n = n, x1 = x1,x2=x2, mu_zero = mu_zero)
dataOrd <- list(z = z2, distmat=distmat)
gaminit <- c(-2, 0, exp(0), exp(1) + exp(0),  5)
y1 <- runif(length(z), min=gaminit[z], max=gaminit[z+1])
xmat <- cbind(x1, x2)
betainit <- c(solve(t(xmat)%*%xmat)%*%t(xmat)%*%y1)
initsOrd <- list(beta1death = betainit[1], beta2death = betainit[1],
beta1vax=betainit[2], beta2vax=betainit[2], tau = n/2+.1,
sigma=1, alpha3 = 0, alpha4 = 1, phiU=1, phiW=1, phiV=1, U=mu_zero,
W=mu_zero, V=mu_zero)
modelOrd <- nimbleModel(codeOrd, constants = constantsOrd, data = dataOrd, inits = initsOrd)
#Compile Model, run MCMC
cmodelOrd = compileNimble(modelOrd)
mcmc.outOrd <- nimbleMCMC(code = codeOrd, constants = constantsOrd,
data = dataOrd, inits = initsOrd, nburnin=5000,
nchains = 2, niter = 100000,thin=5,
summary = TRUE,
monitors = c('beta1death', "beta2death", "beta1vax", "beta2vax",
"alpha3","alpha4", "tau", "phiU", "phiV", "phiW", "sigma",
"beta1deathstar", "beta2deathstar",
"beta1vaxstar", "beta2vaxstar",
"gam"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
#Model Summary
#mcmc.outOrd$summary
###############################
# Compare the change point when we estimate with continuous response
codeCont <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
beta1vax ~ dnorm(0, sd = 200)
beta2vax ~ dnorm(0, sd = 200)
tau ~ dunif(5,n-5)
sigma ~ dgamma(1, .1)
phiU ~ dunif(0,20)
phiW ~ dunif(0,20)
phiV ~ dunif(0,20)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 1)
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholW[1:n,1:n], prec_param=1)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky=cholV[1:n,1:n], prec_param=1)
for(i in 1:n){
mu[i] <- U[i] + (beta1death * x1[i] + beta1vax*x2[i] + V[i]) * ((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * x1[i] +beta2vax*x2[i] + W[i])* ((i-tau) + abs(i-tau)) / (2 * (i-tau))
y[i] ~ dnorm(mu[i], sigma)
}
})
# Setting Values
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
constantsCont <- list(n = n, x1 = x1,x2=x2, mu_zero = mu_zero)
dataCont <- list(y = y, distmat=distmat)
xmat <- cbind(x1, x2)
betainit <- c(solve(t(xmat)%*%xmat)%*%t(xmat)%*%y)
initsCont <- list(beta1death = betainit[1], beta2death = betainit[1],
beta1vax=betainit[2], beta2vax=betainit[2], tau = n/2+.1,
sigma=1, phiU=1, phiW=1, phiV=1, U=mu_zero,
W=mu_zero, V=mu_zero)
modelCont <- nimbleModel(codeCont, constants = constantsCont, data = dataCont, inits = initsCont)
# Compile Model, run MCMC
cmodelCont = compileNimble(modelCont)
mcmc.outCont <- nimbleMCMC(code = codeCont, constants = constantsCont,
data = dataCont, inits = initsCont, nburnin=5000,
nchains = 2, niter = 100000,thin=5,
summary = TRUE,
monitors = c('beta1death', "beta2death", "beta1vax", "beta2vax",
"tau", "phiU", "phiV", "phiW", "sigma"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
#mcmc.outCont$summary
print(paste("Finished:", jj))
county <- gsub(" ", "", counties[jj])
file <- paste(county, ".Rdata", sep = "")
save(mcmc.outCont, mcmc.outOrd,
file=file)
title <- paste(county, "TracePlots", sep = "")
png(file = title)
par(mfrow = c(2, 2))
tauCont1 <- mcmc.outCont$samples$chain1[, 9]
plot(as.matrix(tauCont1), type = 'l',
main = "Tau, Continuous, Chain 1",
ylab = "Tau")
tauCont2 <- mcmc.outCont$samples$chain2[,9]
plot(as.matrix(tauCont2), type = 'l',
main = "Tau, Continuous, Chain 2",
ylab = "Tau")
tauOrd1 <- mcmc.outOrd$samples$chain1[, 20]
plot(as.matrix(tauOrd1), type = 'l',
main = "Tau, Ordinal, Chain 1",
ylab = "Tau")
tauOrd2 <- mcmc.outOrd$samples$chain2[, 20]
plot(as.matrix(tauOrd2), type = 'l',
main = "Tau, Ordinal, Chain 2",
ylab = "Tau")
dev.off()
}
