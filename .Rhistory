inv_SIGMA_u_tmp_trans_22_matlist_training = list()
mat_mult_temp_SIGMA_u_tmp_vec = vector()
# inv_SIGMA_cond_pre_changepoint_matlist_training = list()
# inv_SIGMA_cond_post_changepoint_matlist_training = list()
SIGMA_u_tmp_trans_21_mat_training = vector()
for (tmp in (1:n_tmp_training)) {
idx = 1:n_tmp_training
if(tmp != 1){
idx[1] = tmp
idx[tmp] = 1
}
SIGMA_u_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% SIGMA_u_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_u_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% inv_SIGMA_u_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_u_tmp_trans_a_training = inv_SIGMA_u_tmp_trans_training[1,1]
inv_SIGMA_u_tmp_trans_b_training = inv_SIGMA_u_tmp_trans_training[1,-1]
inv_SIGMA_u_tmp_trans_c_training = inv_SIGMA_u_tmp_trans_training[-1,1]
inv_SIGMA_u_tmp_trans_d_training = inv_SIGMA_u_tmp_trans_training[-1,-1]
inv_SIGMA_u_tmp_trans_22_training = (inv_SIGMA_u_tmp_trans_d_training - (inv_SIGMA_u_tmp_trans_c_training %*%
t(inv_SIGMA_u_tmp_trans_b_training))/
inv_SIGMA_u_tmp_trans_a_training)
SIGMA_u_tmp_trans_21_training = SIGMA_u_tmp_trans_training[-1,1]
mat_mult_temp_SIGMA_u_tmp_vec[tmp] = as.numeric(1 - t(SIGMA_u_tmp_trans_21_training) %*%
inv_SIGMA_u_tmp_trans_22_training %*%
SIGMA_u_tmp_trans_21_training)
inv_SIGMA_u_tmp_trans_22_matlist_training[[tmp]] = inv_SIGMA_u_tmp_trans_22_training
SIGMA_u_tmp_trans_21_mat_training = cbind(SIGMA_u_tmp_trans_21_mat_training, SIGMA_u_tmp_trans_21_training)
}
total_tt_mat_inv = total_tt_mat_inv + as.numeric(difftime(Sys.time(), st_mat_inv), units="secs")
###################################################################################################################
#delta posterior###############################
st_delta = Sys.time()
delta3_slice = diversitree::mcmc(lik = delta3_dens_func, x.init = c(delta_training[3]), nsteps = 1,w= 5, lower = 0,
upper = delta_training[4])
delta_training[3] =delta3_slice$pars
delta4_slice = diversitree::mcmc(lik = delta4_dens_func, x.init = c(delta_training[4]), nsteps = 1,w= 5, lower = delta_training[3],
upper = Inf)
delta_training[4] = delta4_slice$pars
total_tt_delta = total_tt_delta + as.numeric(difftime(Sys.time(), st_delta), units="secs")
################################################################################################################
#t_0 posterior####################################
st_t_0 = Sys.time()
log_prop_pmf_t_0_vec_training = vector()
for (tp in (changepoint_vec)) {
week_t = changepoint_week_vec[tp + 1]#+1 because added zero
training_post_t_df = training_df_clone %>% filter(week > week_t)
if(tp != 0){
training_pre_t_df = training_df_clone %>% filter(week <= week_t)
X_mat_pre_t = cbind(rep(1,n_sp_training * tp),
training_pre_t_df$scaled_prev_log_new_death,
training_pre_t_df$scaled_first_dose_prevalence)
u_vec_pre_t = training_pre_t_df$u_vec
pi_vec_pre_t = training_pre_t_df$pi_vec
temp_vec = pi_vec_pre_t - X_mat_pre_t %*% beta_training - u_vec_pre_t
}
if(tp != n_tmp_training){
X_mat_post_t = cbind(rep(1, n_sp_training * (n_tmp_training - tp)),
training_post_t_df$scaled_prev_log_new_death,
training_post_t_df$scaled_first_dose_prevalence)
#w_vec_pre_t = training_pre_t_df$w_vec
v_vec_post_t = training_post_t_df$v_vec
u_vec_post_t = training_post_t_df$u_vec
pi_vec_post_t = training_post_t_df$pi_vec
#- w_vec_pre_t
temp_vec2 = pi_vec_post_t - X_mat_post_t %*% beta_star_training - u_vec_post_t - v_vec_post_t
n_tmp_post_t = n_tmp_training - tp
}
if(tp == 0){
log_prop_pmf_t_0_training = (((-n_sp_training*(n_tmp_post_t)/2) *
log(2*pi*sigma_eps_sq_star_training)) +
((-1/(2*sigma_eps_sq_star_training)) * sum(temp_vec2^2)))
}else if(tp == n_tmp_training){
log_prop_pmf_t_0_training = ((-n_sp_training * tp/2)*log(2*pi*sigma_eps_sq_training) +
((-1/(2*sigma_eps_sq_training)) * sum(temp_vec^2)))
}else{
log_prop_pmf_t_0_training = ((-n_sp_training * tp/2)*log(2*pi*sigma_eps_sq_training) +
((-1/(2*sigma_eps_sq_training)) * sum(temp_vec^2)) +
((-n_sp_training*(n_tmp_post_t)/2) *
log(2*pi*sigma_eps_sq_star_training)) +
((-1/(2*sigma_eps_sq_star_training)) * sum(temp_vec2^2)))
}
log_prop_pmf_t_0_vec_training = c(log_prop_pmf_t_0_vec_training, log_prop_pmf_t_0_training)
}
#min_prop_pmf_t_0_vec_training = min(prop_pmf_t_0_vec_training)
max_log_prop_pmf_t_0_vec_training = max(log_prop_pmf_t_0_vec_training)
# if(min_prop_pmf_t_0_vec_training < 0){
#   prop_pmf_t_0_vec_training = prop_pmf_t_0_vec_training + (-min_prop_pmf_t_0_vec_training)
# }
log_prop_pmf_t_0_vec_training_minus_max = log_prop_pmf_t_0_vec_training - max_log_prop_pmf_t_0_vec_training
prop_pmf_t_0_vec_training = exp(log_prop_pmf_t_0_vec_training_minus_max)
const_prop = 1/sum(prop_pmf_t_0_vec_training)
t_0_training = sample(x = (changepoint_vec),1, replace = FALSE,
prob = round(prop_pmf_t_0_vec_training * const_prop, digits = 3))
n_tmp_pre_changepoint_training = t_0_training
n_tmp_post_changepoint_training = n_tmp_training - n_tmp_pre_changepoint_training
changepoint_t_0_week = changepoint_week_vec[n_tmp_pre_changepoint_training + 1]#+1 because added zero
total_tt_t_0 = total_tt_t_0 + as.numeric(difftime(Sys.time(), st_t_0), units="secs")
#Collecting samples for prediction
if(i %% diff_in_random_draws_training == 0){
v_vec_sample_training = cbind(v_vec_sample_training, v_vec_training)
#w_vec_sample_training = cbind(w_vec_sample_training, w_vec_training)
u_vec_sample_training = cbind(u_vec_sample_training, u_vec_training)
pi_vec_sample_training = cbind(pi_vec_sample_training, pi_vec_training)
delta_sample_training = cbind(delta_sample_training, delta_training)
beta_sample_training = cbind(beta_sample_training, beta_training)
beta_star_sample_training = cbind(beta_star_sample_training, beta_star_training)
sigma_u_sq_sample_training = c(sigma_u_sq_sample_training, sigma_u_sq_training)
#sigma_w_sq_sample_training = c(sigma_w_sq_sample_training, sigma_w_sq_training)
sigma_v_sq_sample_training = c(sigma_v_sq_sample_training, sigma_v_sq_training)
sigma_eps_sq_sample_training = c(sigma_eps_sq_sample_training, sigma_eps_sq_training)
sigma_eps_sq_star_sample_training = c(sigma_eps_sq_star_sample_training, sigma_eps_sq_star_training)
phi_u_sp_sample_training = c(phi_u_sp_sample_training, phi_u_sp_training)
phi_u_tmp_sample_training = c(phi_u_tmp_sample_training, phi_u_tmp_training)
# phi_w_sp_sample_training = c(phi_w_sp_sample_training, phi_w_sp_training)
# phi_w_tmp_sample_training = c(phi_w_tmp_sample_training, phi_w_tmp_training)
phi_v_sp_sample_training = c(phi_v_sp_sample_training, phi_v_sp_training)
phi_v_tmp_sample_training = c(phi_v_tmp_sample_training, phi_v_tmp_training)
t_0_sample_training = c(t_0_sample_training, t_0_training)
}
}
if (i %% 2500 == 0) {
save(beta_sample_chains_list_training, beta_star_sample_chains_list_training,
t0_sample_chains_list_training, converged_i,
file=paste(county, i, "iters.Rdata", sep = ""))
}
i = i+1
if (i > 5000) {
break
}
}
#time analysis
# avg_tt_v = total_tt_v/(i)
# avg_tt_beta = total_tt_beta/(i)
# #avg_tt_sigma_w_sq = total_tt_sigma_w_sq/(i)
# avg_tt_sigma_eps_sq = total_tt_sigma_eps_sq/(i)
# avg_tt_delta = total_tt_delta/(i)
# avg_tt_pi = total_tt_pi/(i)
# avg_tt_t_0 = total_tt_t_0/(i)
# sum(avg_tt_v,avg_tt_beta, avg_tt_sigma_w_sq, avg_tt_sigma_eps_sq, avg_tt_delta, avg_tt_pi, avg_tt_t_0)
#estimation of y with the posterior parameters
# estimated_pi_training = X_mat_pre_changepoint_training %*% rowMeans(beta_sample_training) +
#   rowMeans(v_sample_training) + rnorm(n_total_training,mean = 0, sd= sqrt(mean(sigma_eps_sq_sample_training)))
#
# estimated_pi_star_training = X_mat_post_changepoint_training %*% rowMeans(beta_star_sample_training) +
#   rowMeans(v_star_sample_training) + rnorm(n_total_training,mean = 0, sd= sqrt(mean(sigma_eps_sq_star_sample_training)))
#####################################################################################################
# training_df_clone$pi_vec_est = rowMeans(pi_vec_sample_training)
# mean_delta_training = rowMeans(delta_sample_training)
# training_df_clone = training_df_clone %>%
#   mutate(pred_category = ifelse(pi_vec_est > mean_delta_training[4],4,
#                                 ifelse(pi_vec_est > mean_delta_training[3], 3,
#                                        ifelse(pi_vec_est > mean_delta_training[2],2,1))))
# pred_category = training_df_clone$pred_category
#
# pred_category_mat = cbind(pred_category_mat, pred_category)
#
# accuracy_pred = sum(training_df_clone$category == training_df_clone$pred_category)/n_total_training
#
# accuracy_pred_vec = c(accuracy_pred_vec, accuracy_pred)
# # mape_training = (sum(abs( (y_training - estimated_pi_training)/y_training )))/n_total_training
# # mape_vec_training_training = c(mape_vec_training_training, mape_training)
#
#
#
# #Testing for significance
# beta_significance_vec = vector()
# for (ts in (1:(p+1))) {
#   beta_significance_vec = c(beta_significance_vec,
#                             unname(!(0 >= quantile(beta_sample_training[ts,], 0.025) &
#                                        0 <= quantile(beta_sample_training[ts,], 0.975))))
# }
# beta_significance_mat_training = cbind(beta_significance_mat_training, beta_significance_vec)
#
# beta_star_significance_vec = vector()
# for (ts in (1:(p+1))) {
#   beta_star_significance_vec = c(beta_star_significance_vec,
#                                  unname(!(0 >= quantile(beta_star_sample_training[ts,], 0.025) &
#                                             0 <= quantile(beta_star_sample_training[ts,], 0.975))))
# }
# beta_star_significance_mat_training = cbind(beta_star_significance_mat_training,
#                                             beta_star_significance_vec)
###########################################################################################
# min_idx = which(mape_vec_validation_training == min(mape_vec_validation_training))
# if(min_idx %% length(rho_vec_sp_training) == 0){
#   phi_s = length(rho_vec_sp_training)
#   phi_t = min_idx/length(rho_vec_sp_training)
# }else{
#   phi_s = rho_vec_sp_training[min_idx %% length(rho_vec_sp_training)]
#   phi_t = rho_vec_tmp_training[floor(min_idx/length(rho_vec_sp_training)) + 1]
# }
# return(c(phi_s, phi_t))
save(beta_sample_chains_list_training, beta_star_sample_chains_list_training,
t0_sample_chains_list_training, converged_i,
file=paste(county, i, "iters.Rdata", sep = ""))
# n <- length(beta_sample_chains_list_training[[1]])
#
# par(mfrow = c(1, 3))
# plot(beta_sample_chains_list_training[[1]][1,],
#      ylab = 'Beta1 Pre-Change Point - Chain 1',
#      type = 'l')
# plot(beta_sample_chains_list_training[[2]][1,],
#      ylab = 'Beta1 Pre-Change Point - Chain 2',
#      type = 'l')
# plot(beta_sample_chains_list_training[[3]][1,],
#      ylab = 'Beta1 Pre-Change Point - Chain 3',
#      type = 'l')
#
# plot(beta_sample_chains_list_training[[1]][2,],
#      ylab = 'Beta2 Pre-Change Point - Chain 1',
#      type = 'l')
# plot(beta_sample_chains_list_training[[2]][2,],
#      ylab = 'Beta2 Pre-Change Point - Chain 2',
#      type = 'l')
# plot(beta_sample_chains_list_training[[3]][2,],
#      ylab = 'Beta2 Pre-Change Point - Chain 3',
#      type = 'l')
#
# plot(beta_sample_chains_list_training[[1]][3,],
#      ylab = 'Beta3 Pre-Change Point - Chain 1',
#      type = 'l')
# plot(beta_sample_chains_list_training[[2]][3,],
#      ylab = 'Beta3 Pre-Change Point - Chain 2',
#      type = 'l')
# plot(beta_sample_chains_list_training[[3]][3,],
#      ylab = 'Beta3 Pre-Change Point - Chain 3',
#      type = 'l')
#
# plot(beta_star_sample_chains_list_training[[1]][1,],
#      ylab = 'Beta1 Post-Change Point - Chain 1',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[2]][1,],
#      ylab = 'Beta1 Post-Change Point - Chain 2',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[3]][1,],
#      ylab = 'Beta1 Post-Change Point - Chain 3',
#      type = 'l')
#
# plot(beta_star_sample_chains_list_training[[1]][2,],
#      ylab = 'Beta2 Post-Change Point - Chain 1',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[2]][2,],
#      ylab = 'Beta2 Post-Change Point - Chain 2',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[3]][2,],
#      ylab = 'Beta2 Post-Change Point - Chain 3',
#      type = 'l')
#
# plot(beta_star_sample_chains_list_training[[1]][3,],
#      ylab = 'Beta3 Post-Change Point - Chain 1',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[2]][3,],
#      ylab = 'Beta3 Post-Change Point - Chain 2',
#      type = 'l')
# plot(beta_star_sample_chains_list_training[[3]][3,],
#      ylab = 'Beta3 Post-Change Point - Chain 3',
#      type = 'l')
}
load("/Users/adamiser810/Desktop/Change-point-models/BroomeCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
t0_sample_chains_list_training
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Post-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Post-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Post-Change Point - Chain 3',
type = 'l')
load("/Users/adamiser810/Desktop/Change-point-models/CattaraugusCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Post-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Post-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Post-Change Point - Chain 3',
type = 'l')
load("/Users/adamiser810/Desktop/Change-point-models/CayugaCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Post-Change Point - Chain 3',
type = 'l')
load("/Users/adamiser810/Desktop/Change-point-models/ChautauquaCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
load("/Users/adamiser810/Desktop/Change-point-models/BroomeCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
load("/Users/adamiser810/Desktop/Change-point-models/CattaraugusCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
load("/Users/adamiser810/Desktop/Change-point-models/CayugaCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
load("/Users/adamiser810/Desktop/Change-point-models/CayugaCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
load("/Users/adamiser810/Desktop/Change-point-models/ChemungCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
load("/Users/adamiser810/Desktop/Change-point-models/ChenangoCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][3,],
ylab = 'Beta3 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_star_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Post-Change Point - Chain 1',
type = 'l')
plot(beta_star_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Post-Change Point - Chain 2',
type = 'l')
plot(beta_star_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Post-Change Point - Chain 3',
type = 'l')
load("/Users/adamiser810/Desktop/Change-point-models/ClintonCounty5001iters.Rdata")
n <- length(beta_sample_chains_list_training[[1]])
par(mfrow = c(1, 3))
plot(beta_sample_chains_list_training[[1]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][1,],
ylab = 'Beta1 Pre-Change Point - Chain 3',
type = 'l')
plot(beta_sample_chains_list_training[[1]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 1',
type = 'l')
plot(beta_sample_chains_list_training[[2]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 2',
type = 'l')
plot(beta_sample_chains_list_training[[3]][2,],
ylab = 'Beta2 Pre-Change Point - Chain 3',
type = 'l')
full_data <- read.csv("currentjoineddata.csv")
unique(full_data$Recip_County)
