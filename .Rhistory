#                                                   xbeta_mat_training[,tmp] - u_mat_training[,tmp])/
#                                                sigma_eps_sq_training)
#
#
#     w_mat_training[,tmp] = w_mean_training + t(chol(w_covar_training))  %*% rnorm(n_sp_training)
#
#   }else{
#
#     SIGMA_cond_training = (SIGMA_w_sp_training * mat_mult_temp_SIGMA_w_tmp_vec[tmp])
#
#     w_mat_training[,tmp] = (mu_cond_training + t(chol(SIGMA_cond_training))  %*%
#                               rnorm(n_sp_training, sd = sqrt(sigma_w_sq_training)))
#
#   }
#
#
# }
# training_df_clone$w_vec = w_mat_training[1:n_total_training]
# w_vec_training = training_df_clone$w_vec
#
# total_tt_w = total_tt_w + as.numeric(difftime(Sys.time(), st_w), units="secs")
#u posterior##################################################################################################
st_u = Sys.time()
for (tmp in (1:n_tmp_training)){
idx = 1:n_tmp_training
if(tmp!=1){
idx[1] = tmp
idx[tmp] = 1
}
#Switching first and jth index column for V matrix and then taking values from the 2nd column
u_cond_training = (u_mat_training %*%
diag(n_tmp_training)[idx,])[(1 + n_sp_training):(n_total_training)]
u_cond_mat_training = matrix(u_cond_training, nrow = n_sp_training,
ncol = (n_tmp_training - 1), byrow = FALSE)
#Can be made faster by doing this for all change points or instead of doing it for all check if for
#the change point this is already done if so get the value from there
mu_cond_training = u_cond_mat_training %*% SIGMA_u_tmp_trans_12_mult_22_mat_training[,tmp]
#Can be made faster by dynamically saving values in a vector
inv_SIGMA_cond_training = (inv_SIGMA_u_sp_training/mat_mult_temp_SIGMA_u_tmp_vec_training[tmp])
if(tmp <= t_0_training){
try(u_covar_training <- chol2inv(chol(inv_SIGMA_cond_training/sigma_u_sq_training +
ident_n_sp_mat_training/sigma_eps_sq_training)),
break)
u_mean_training  = u_covar_training %*% (inv_SIGMA_cond_training %*%
mu_cond_training/sigma_u_sq_training +
(pi_mat_training[,tmp] -
xbeta_mat_training[,tmp])/
sigma_eps_sq_training)
try(u_mat_training[,tmp] <- u_mean_training + t(chol(u_covar_training))  %*% rnorm(n_sp_training),
break)
}else{
try(u_covar_training <- chol2inv(chol(inv_SIGMA_cond_training/sigma_u_sq_training +
ident_n_sp_mat_training/sigma_eps_sq_star_training)),
break)
u_mean_training  = u_covar_training %*% (inv_SIGMA_cond_training %*%
mu_cond_training/sigma_u_sq_training +
(pi_mat_training[,tmp] -
xbeta_mat_training[,tmp] - v_mat_training[,tmp])/
sigma_eps_sq_star_training)
try(u_mat_training[,tmp] <- u_mean_training + t(chol(u_covar_training))  %*% rnorm(n_sp_training),
break)
}
}
training_df_clone$u_vec = u_mat_training[1:n_total_training]
u_vec_training = training_df_clone$u_vec
total_tt_u = total_tt_u + as.numeric(difftime(Sys.time(), st_u), units="secs")
########################################################################################################################
#beta posterior###################################
st_beta = Sys.time()
pi_pre_changepoint_training = pi_mat_training[1:(n_tmp_pre_changepoint_training*n_sp_training)]
pi_post_changepoint_training = pi_mat_training[(n_tmp_pre_changepoint_training*n_sp_training+1):n_total_training]
#w_minus_training = w_mat_training[1:(n_tmp_pre_changepoint_training*n_sp_training)]
v_plus_training = v_mat_training[(n_tmp_pre_changepoint_training*n_sp_training+1):n_total_training]
u_minus_training = u_mat_training[1:(n_tmp_pre_changepoint_training*n_sp_training)]
u_plus_training = u_mat_training[(n_tmp_pre_changepoint_training*n_sp_training+1):n_total_training]
#dividing by 10^4 for large variance for beta prior
beta_covar_training = solve( (t(X_mat_pre_changepoint_training) %*%
X_mat_pre_changepoint_training)/sigma_eps_sq_training) #+ diag(p+1)/10^4
beta_star_covar_training = solve( (t(X_mat_post_changepoint_training) %*%
X_mat_post_changepoint_training)/sigma_eps_sq_star_training)
beta_mean_training = beta_covar_training %*% ( t(X_mat_pre_changepoint_training)%*%
(pi_pre_changepoint_training - u_minus_training))/sigma_eps_sq_training
beta_star_mean_training = (beta_star_covar_training %*% (t(X_mat_post_changepoint_training)%*%
(pi_post_changepoint_training - u_plus_training
- v_plus_training))/sigma_eps_sq_star_training)
try(beta_training <- beta_mean_training + t(chol(beta_covar_training)) %*% rnorm(p+1),
break)
try(beta_star_training <- beta_star_mean_training + t(chol(beta_star_covar_training)) %*% rnorm(p+1),
break)
training_df_clone$x_beta_vec = c(as.numeric(X_mat_pre_changepoint_training %*% beta_training),
as.numeric(X_mat_post_changepoint_training %*%beta_star_training))
total_tt_beta = total_tt_beta + as.numeric(difftime( Sys.time(), st_beta), units="secs")
#######################################################################################################################
#Sigma1^2 posterior######################################################
#st_sigma_w_sq = Sys.time()
# sigma_w_sq_a_training = a_training + (n_sp_training * n_tmp_pre_changepoint_training)/2
#
# sigma_v_sq_a_training = a_training + (n_sp_training * n_tmp_post_changepoint_training)/2
#
# sigma_w_sq_lambda_training = (t(v_training) %*%
#                                inv_SIGMA_sp_kro_inv_SIGMA_tmp_pre_t_mat_list[[t_0_training/gap_bw_changepoints - 1]]
#                              %*% v_training)/2 + lambda_training
#
# sigma_v_sq_lambda_training = (t(v_star_training) %*%
#                                     inv_SIGMA_sp_kro_inv_SIGMA_tmp_post_t_mat_list[[t_0_training/gap_bw_changepoints - 1]]
#                                   %*% v_star_training)/2 + lambda_training
#sigma_w_sq_training = 1#invgamma::rinvgamma(1,sigma_w_sq_a_training,rate = sigma_w_sq_lambda_training)
sigma_v_sq_training = 1#invgamma::rinvgamma(1, sigma_v_sq_a_training,
#rate = sigma_v_sq_lambda_training)
#total_tt_sigma_w_sq = total_tt_sigma_w_sq + as.numeric(difftime(Sys.time(), st_sigma_w_sq), units="secs")
##########################################################################################################################
#Sigma2^2 posterior############################################
st_sigma_eps_sq = Sys.time()
# sigma_eps_sq_a_training = a_training + (n_sp_training * n_tmp_pre_changepoint_training)/2
#
# sigma_eps_sq_star_a_training = a_training + (n_sp_training * n_tmp_post_changepoint_training)/2
#
# temp_vec = pi_pre_changepoint_training - X_mat_pre_changepoint_training%*%beta_training - v_training
#
# temp_vec2 = (pi_post_changepoint_training - X_mat_post_changepoint_training %*% beta_star_training -
#                v_star_training)
#
# sigma_eps_sq_lambda_training = sum(temp_vec^2)/2 + lambda_training
#
# sigma_eps_sq_star_lambda_training = sum(temp_vec2^2)/2 + lambda_training
sigma_eps_sq_training = 1#invgamma::rinvgamma(1,sigma_eps_sq_a_training,rate = sigma_eps_sq_lambda_training)
sigma_eps_sq_star_training = 1#invgamma::rinvgamma(1, sigma_eps_sq_star_a_training,
#rate = sigma_eps_sq_star_lambda_training)
total_tt_sigma_eps_sq = total_tt_sigma_eps_sq + as.numeric(difftime(Sys.time(), st_sigma_eps_sq), units="secs")
#phi_u_sp posterior arms########################################################################################
# st_phi_u_sp = Sys.time()
#
# phi_u_sp_slice = diversitree::mcmc(lik = phi_u_sp_log_density_func, x.init = c(phi_u_sp_training),
#                                    nsteps = 1, w= 5, lower = 0, upper = 3)
#
# phi_u_sp_training =phi_u_sp_slice$pars
#
# total_tt_phi_u_sp = total_tt_phi_u_sp + as.numeric(difftime(Sys.time(), st_phi_u_sp), units="secs")
#phi_u_tmp posterior arms########################################################################################
st_phi_u_tmp = Sys.time()
phi_u_tmp_slice = diversitree::mcmc(lik = phi_u_tmp_log_density_func, x.init = c(phi_u_tmp_training),
nsteps = 1, w= 5, lower = 0, upper = 3)
phi_u_tmp_training =phi_u_tmp_slice$pars
total_tt_phi_u_tmp = total_tt_phi_u_tmp + as.numeric(difftime(Sys.time(), st_phi_u_tmp), units="secs")
#phi_w_sp posterior arms########################################################################################
# if(i %% 20 == 0){
#
#   st_phi_w_sp = Sys.time()
#
#   phi_w_sp_log_density_vec_training = vector()
#   for(phi_w_sp_val in  phi_sp_vec_training){
#
#     phi_w_sp_log_density_vec_training = c(phi_w_sp_log_density_vec_training,
#                                           phi_w_sp_log_density_func(phi_w_sp_val))
#
#
#   }
#
#   phi_w_sp_log_density_vec_training = (phi_w_sp_log_density_vec_training - max(phi_w_sp_log_density_vec_training))
#
#   phi_w_sp_density_vec_training = exp(phi_w_sp_log_density_vec_training)
#
#   const_prop_phi_w_sp = 1/sum(phi_w_sp_density_vec_training)
#
#   phi_w_sp_training = sample(x = (phi_sp_vec_training), 1, replace = FALSE,
#                              prob = round(phi_w_sp_density_vec_training * const_prop_phi_w_sp, digits = 3))
#
#   phi_w_sp_preconvergence_training[mc] = phi_w_sp_training
#   total_tt_phi_w_sp = total_tt_phi_w_sp + as.numeric(difftime(Sys.time(), st_phi_w_sp), units="secs")
# }
# #phi_w_tmp posterior arms########################################################################################
# if(i %% 20 == 0){
#
#   st_phi_w_tmp = Sys.time()
#
#   phi_w_tmp_log_density_vec_training = vector()
#   for(phi_w_tmp_val in  phi_tmp_vec_training){
#
#     phi_w_tmp_log_density_vec_training = c(phi_w_tmp_log_density_vec_training,
#                                            phi_w_tmp_log_density_func(phi_w_tmp_val))
#
#
#   }
#
#   phi_w_tmp_log_density_vec_training = (phi_w_tmp_log_density_vec_training - max(phi_w_tmp_log_density_vec_training))
#
#   phi_w_tmp_density_vec_training = exp(phi_w_tmp_log_density_vec_training)
#
#   const_prop_phi_w_tmp = 1/sum(phi_w_tmp_density_vec_training)
#
#   phi_w_tmp_training = sample(x = (phi_tmp_vec_training), 1, replace = FALSE,
#                               prob = round(phi_w_tmp_density_vec_training * const_prop_phi_w_tmp, digits = 3))
#
#   phi_w_tmp_preconvergence_training[mc] = phi_w_tmp_training
#   total_tt_phi_w_tmp = total_tt_phi_w_tmp + as.numeric(difftime(Sys.time(), st_phi_w_tmp), units="secs")
# }
#phi_v_sp posterior arms########################################################################################
# st_phi_v_sp = Sys.time()
#
# phi_v_sp_slice = diversitree::mcmc(lik = phi_v_sp_log_density_func, x.init = c(phi_v_sp_training),
#                                    nsteps = 1, w= 5, lower = 0, upper = 3)
#
# phi_v_sp_training =phi_v_sp_slice$pars
#
# total_tt_phi_v_sp = total_tt_phi_v_sp + as.numeric(difftime(Sys.time(), st_phi_v_sp), units="secs")
#phi_v_tmp posterior arms########################################################################################
st_phi_v_tmp = Sys.time()
phi_v_tmp_slice = diversitree::mcmc(lik = phi_v_tmp_log_density_func, x.init = c(phi_v_tmp_training),
nsteps = 1, w= 5, lower = 0, upper = 3)
phi_v_tmp_training =phi_v_tmp_slice$pars
total_tt_phi_v_tmp = total_tt_phi_v_tmp + as.numeric(difftime(Sys.time(), st_phi_v_tmp), units="secs")
#Getting the matrix division for V calculations##################################################################
#Getting inv Sigma_sp_22 to use for every iteration
st_mat_inv = Sys.time()
SIGMA_v_sp_training = as.matrix(1)
try(inv_SIGMA_v_sp_training <- chol2inv(chol(SIGMA_v_sp_training)),
break)
#log_det_SIGMA_v_sp_training = (determinant(SIGMA_v_sp_training, logarithm = TRUE))$modulus[1]
SIGMA_v_tmp_training = exp(- phi_v_tmp_training * week_diff_mat_training)
try(inv_SIGMA_v_tmp_training <- chol2inv(chol(SIGMA_v_tmp_training)),
break)
#log_det_SIGMA_v_tmp_training = (determinant(SIGMA_v_tmp_training, logarithm = TRUE))$modulus[1]
#inv_SIGMA_v_tmp_kro_inv_SIGMA_v_sp_training = inv_SIGMA_v_tmp_training %x% inv_SIGMA_v_sp_training
#inv_SIGMA_v_tmp_trans_22_matlist_training = list()
mat_mult_temp_SIGMA_v_tmp_vec_training = vector()
# inv_SIGMA_cond_pre_changepoint_matlist_training = list()
# inv_SIGMA_cond_post_changepoint_matlist_training = list()
SIGMA_v_tmp_trans_12_mult_22_mat_training = vector()
for (tmp in (1:n_tmp_training)) {
idx = 1:n_tmp_training
if(tmp != 1){
idx[1] = tmp
idx[tmp] = 1
}
SIGMA_v_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% SIGMA_v_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_v_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% inv_SIGMA_v_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_v_tmp_trans_a_training = inv_SIGMA_v_tmp_trans_training[1,1]
inv_SIGMA_v_tmp_trans_b_training = inv_SIGMA_v_tmp_trans_training[1,-1]
inv_SIGMA_v_tmp_trans_c_training = inv_SIGMA_v_tmp_trans_training[-1,1]
inv_SIGMA_v_tmp_trans_d_training = inv_SIGMA_v_tmp_trans_training[-1,-1]
inv_SIGMA_v_tmp_trans_22_training = (inv_SIGMA_v_tmp_trans_d_training - (inv_SIGMA_v_tmp_trans_c_training %*%
t(inv_SIGMA_v_tmp_trans_b_training))/
inv_SIGMA_v_tmp_trans_a_training)
SIGMA_v_tmp_trans_21_training = SIGMA_v_tmp_trans_training[-1,1]
mat_mult_temp_SIGMA_v_tmp_vec_training[tmp] = as.numeric(1 - t(SIGMA_v_tmp_trans_21_training) %*%
inv_SIGMA_v_tmp_trans_22_training %*%
SIGMA_v_tmp_trans_21_training)
# inv_SIGMA_v_tmp_trans_22_matlist_training[[tmp]] = inv_SIGMA_v_tmp_trans_22_training
# SIGMA_v_tmp_trans_21_mat_training = cbind(SIGMA_v_tmp_trans_21_mat_training, SIGMA_v_tmp_trans_21_training)
SIGMA_v_tmp_trans_12_mult_22_training = (t(SIGMA_v_tmp_trans_21_training) %*%
inv_SIGMA_v_tmp_trans_22_training)
SIGMA_v_tmp_trans_12_mult_22_mat_training = cbind(SIGMA_v_tmp_trans_12_mult_22_mat_training,
as.vector(SIGMA_v_tmp_trans_12_mult_22_training))
}
#Getting the matrix division for W calculations##################################################################
# SIGMA_w_sp_training = exp(- phi_w_sp_training * distance_mat_training)
# inv_SIGMA_w_sp_training = chol2inv(chol(SIGMA_w_sp_training))
# #log_det_SIGMA_w_sp_training = (determinant(SIGMA_w_sp_training, logarithm = TRUE))$modulus[1]
#
#
# SIGMA_w_tmp_training = exp(- phi_w_tmp_training * week_diff_mat_training)
# inv_SIGMA_w_tmp_training = chol2inv(chol(SIGMA_w_tmp_training))
# #log_det_SIGMA_w_tmp_training = (determinant(SIGMA_w_tmp_training, logarithm = TRUE))$modulus[1]
#
# #inv_SIGMA_w_tmp_kro_inv_SIGMA_w_sp_training = inv_SIGMA_w_tmp_training %x% inv_SIGMA_w_sp_training
#
# inv_SIGMA_w_tmp_trans_22_matlist_training = list()
# mat_mult_temp_SIGMA_w_tmp_vec = vector()
#
# SIGMA_w_tmp_trans_21_mat_training = vector()
#
# for (tmp in (1:n_tmp_training)) {
#   idx = 1:n_tmp_training
#
#   if(tmp != 1){
#     idx[1] = tmp
#     idx[tmp] = 1
#   }
#   SIGMA_w_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% SIGMA_w_tmp_training %*%
#                                   diag(n_tmp_training)[idx,])
#
#   inv_SIGMA_w_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% inv_SIGMA_w_tmp_training %*%
#                                       diag(n_tmp_training)[idx,])
#
#   inv_SIGMA_w_tmp_trans_a_training = inv_SIGMA_w_tmp_trans_training[1,1]
#   inv_SIGMA_w_tmp_trans_b_training = inv_SIGMA_w_tmp_trans_training[1,-1]
#   inv_SIGMA_w_tmp_trans_c_training = inv_SIGMA_w_tmp_trans_training[-1,1]
#   inv_SIGMA_w_tmp_trans_d_training = inv_SIGMA_w_tmp_trans_training[-1,-1]
#
#   inv_SIGMA_w_tmp_trans_22_training = (inv_SIGMA_w_tmp_trans_d_training - (inv_SIGMA_w_tmp_trans_c_training %*%
#                                                                              t(inv_SIGMA_w_tmp_trans_b_training))/
#                                          inv_SIGMA_w_tmp_trans_a_training)
#
#   SIGMA_w_tmp_trans_21_training = SIGMA_w_tmp_trans_training[-1,1]
#
#   mat_mult_temp_SIGMA_w_tmp_vec[tmp] = as.numeric(1 - t(SIGMA_w_tmp_trans_21_training) %*%
#                                                     inv_SIGMA_w_tmp_trans_22_training %*%
#                                                     SIGMA_w_tmp_trans_21_training)
#
#   inv_SIGMA_w_tmp_trans_22_matlist_training[[tmp]] = inv_SIGMA_w_tmp_trans_22_training
#   SIGMA_w_tmp_trans_21_mat_training = cbind(SIGMA_w_tmp_trans_21_mat_training, SIGMA_w_tmp_trans_21_training)
#
# }
#Getting the matrix division for U calculations##################################################################
SIGMA_u_sp_training = as.matrix(1)
try(inv_SIGMA_u_sp_training <- chol2inv(chol(SIGMA_u_sp_training)),
break)
#log_det_SIGMA_u_sp_training = (determinant(SIGMA_u_sp_training, logarithm = TRUE))$modulus[1]
SIGMA_u_tmp_training = exp(- phi_u_tmp_training * week_diff_mat_training)
try(inv_SIGMA_u_tmp_training <- chol2inv(chol(SIGMA_u_tmp_training)),
break)
#log_det_SIGMA_u_tmp_training = (determinant(SIGMA_u_tmp_training, logarithm = TRUE))$modulus[1]
#inv_SIGMA_u_tmp_kro_inv_SIGMA_u_sp_training = inv_SIGMA_u_tmp_training %x% inv_SIGMA_u_sp_training
#inv_SIGMA_u_tmp_trans_22_matlist_training = list()
mat_mult_temp_SIGMA_u_tmp_vec_training = vector()
SIGMA_u_tmp_trans_12_mult_22_mat_training = vector()
for (tmp in (1:n_tmp_training)) {
idx = 1:n_tmp_training
if(tmp != 1){
idx[1] = tmp
idx[tmp] = 1
}
SIGMA_u_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% SIGMA_u_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_u_tmp_trans_training = (diag(n_tmp_training)[idx,] %*% inv_SIGMA_u_tmp_training %*%
diag(n_tmp_training)[idx,])
inv_SIGMA_u_tmp_trans_a_training = inv_SIGMA_u_tmp_trans_training[1,1]
inv_SIGMA_u_tmp_trans_b_training = inv_SIGMA_u_tmp_trans_training[1,-1]
inv_SIGMA_u_tmp_trans_c_training = inv_SIGMA_u_tmp_trans_training[-1,1]
inv_SIGMA_u_tmp_trans_d_training = inv_SIGMA_u_tmp_trans_training[-1,-1]
inv_SIGMA_u_tmp_trans_22_training = (inv_SIGMA_u_tmp_trans_d_training - (inv_SIGMA_u_tmp_trans_c_training %*%
t(inv_SIGMA_u_tmp_trans_b_training))/
inv_SIGMA_u_tmp_trans_a_training)
SIGMA_u_tmp_trans_21_training = SIGMA_u_tmp_trans_training[-1,1]
mat_mult_temp_SIGMA_u_tmp_vec_training[tmp] = as.numeric(1 - t(SIGMA_u_tmp_trans_21_training) %*%
inv_SIGMA_u_tmp_trans_22_training %*%
SIGMA_u_tmp_trans_21_training)
# inv_SIGMA_u_tmp_trans_22_matlist_training[[tmp]] = inv_SIGMA_u_tmp_trans_22_training
# SIGMA_u_tmp_trans_21_mat_training = cbind(SIGMA_u_tmp_trans_21_mat_training, SIGMA_u_tmp_trans_21_training)
SIGMA_u_tmp_trans_12_mult_22_training = (t(SIGMA_u_tmp_trans_21_training) %*%
inv_SIGMA_u_tmp_trans_22_training)
SIGMA_u_tmp_trans_12_mult_22_mat_training = cbind(SIGMA_u_tmp_trans_12_mult_22_mat_training,
as.vector(SIGMA_u_tmp_trans_12_mult_22_training))
}
total_tt_mat_inv = total_tt_mat_inv + as.numeric(difftime(Sys.time(), st_mat_inv), units="secs")
###################################################################################################################
#delta posterior###############################
st_delta = Sys.time()
delta3_slice = diversitree::mcmc(lik = delta3_dens_func, x.init = c(delta_training[3]), nsteps = 1,w= 5, lower = 0,
upper = delta_training[4])
delta_training[3] =delta3_slice$pars
delta4_slice = diversitree::mcmc(lik = delta4_dens_func, x.init = c(delta_training[4]), nsteps = 1,w= 5, lower = delta_training[3],
upper = Inf)
delta_training[4] = delta4_slice$pars
total_tt_delta = total_tt_delta + as.numeric(difftime(Sys.time(), st_delta), units="secs")
################################################################################################################
#t_0 posterior####################################
st_t_0 = Sys.time()
log_prop_pmf_t_0_vec_training = vector()
for (tp in (changepoint_vec)) {
week_t = unique(training_df_clone$week)[tp]
training_pre_t_df = training_df_clone %>% filter(week <= week_t)
training_post_t_df = training_df_clone %>% filter(week > week_t)
X_mat_pre_t = cbind(rep(1,n_sp_training * tp),
training_pre_t_df$rand_cov1,
training_pre_t_df$rand_cov2)
X_mat_post_t = cbind(rep(1, n_sp_training * (n_tmp_training - tp)),
training_post_t_df$rand_cov1,
training_post_t_df$rand_cov2)
#w_vec_pre_t = training_pre_t_df$w_vec
v_vec_post_t = training_post_t_df$v_vec
u_vec_pre_t = training_pre_t_df$u_vec
u_vec_post_t = training_post_t_df$u_vec
pi_vec_pre_t = training_pre_t_df$pi_vec
pi_vec_post_t = training_post_t_df$pi_vec
temp_vec = pi_vec_pre_t - X_mat_pre_t %*% beta_training - u_vec_pre_t #- w_vec_pre_t
temp_vec2 = pi_vec_post_t - X_mat_post_t %*% beta_star_training - u_vec_post_t - v_vec_post_t
n_tmp_post_t = n_tmp_training - tp
log_prop_pmf_t_0_training = ((-n_sp_training * tp/2)*log(2*pi*sigma_eps_sq_training) +
((-1/(2*sigma_eps_sq_training)) * sum(temp_vec^2)) +
((-n_sp_training*(n_tmp_post_t)/2) *
log(2*pi*sigma_eps_sq_star_training)) +
((-1/(2*sigma_eps_sq_star_training)) * sum(temp_vec2^2)))
log_prop_pmf_t_0_vec_training = c(log_prop_pmf_t_0_vec_training, log_prop_pmf_t_0_training)
}
#min_prop_pmf_t_0_vec_training = min(prop_pmf_t_0_vec_training)
max_log_prop_pmf_t_0_vec_training = max(log_prop_pmf_t_0_vec_training)
# if(min_prop_pmf_t_0_vec_training < 0){
#   prop_pmf_t_0_vec_training = prop_pmf_t_0_vec_training + (-min_prop_pmf_t_0_vec_training)
# }
log_prop_pmf_t_0_vec_training = log_prop_pmf_t_0_vec_training - max_log_prop_pmf_t_0_vec_training
prop_pmf_t_0_vec_training = exp(log_prop_pmf_t_0_vec_training)
const_prop = 1/sum(prop_pmf_t_0_vec_training)
t_0_training = sample(x = (changepoint_vec),1, replace = FALSE,
prob = round(prop_pmf_t_0_vec_training * const_prop, digits = 3))
n_tmp_pre_changepoint_training = t_0_training
n_tmp_post_changepoint_training = n_tmp_training - n_tmp_pre_changepoint_training
changepoint_t_0_week = unique(training_df$week)[n_tmp_pre_changepoint_training]
total_tt_t_0 = total_tt_t_0 + as.numeric(difftime(Sys.time(), st_t_0), units="secs")
#Collecting samples for prediction
if(i %% diff_in_random_draws_training == 0){
v_vec_sample_training = cbind(v_vec_sample_training, v_vec_training)
#w_vec_sample_training = cbind(w_vec_sample_training, w_vec_training)
u_vec_sample_training = cbind(u_vec_sample_training, u_vec_training)
pi_vec_sample_training = cbind(pi_vec_sample_training, pi_vec_training)
delta_sample_training = cbind(delta_sample_training, delta_training)
beta_sample_training = cbind(beta_sample_training, beta_training)
beta_star_sample_training = cbind(beta_star_sample_training, beta_star_training)
sigma_u_sq_sample_training = c(sigma_u_sq_sample_training, sigma_u_sq_training)
#sigma_w_sq_sample_training = c(sigma_w_sq_sample_training, sigma_w_sq_training)
sigma_v_sq_sample_training = c(sigma_v_sq_sample_training, sigma_v_sq_training)
sigma_eps_sq_sample_training = c(sigma_eps_sq_sample_training, sigma_eps_sq_training)
sigma_eps_sq_star_sample_training = c(sigma_eps_sq_star_sample_training, sigma_eps_sq_star_training)
phi_u_sp_sample_training = c(phi_u_sp_sample_training, phi_u_sp_training)
phi_u_tmp_sample_training = c(phi_u_tmp_sample_training, phi_u_tmp_training)
# phi_w_sp_sample_training = c(phi_w_sp_sample_training, phi_w_sp_training)
# phi_w_tmp_sample_training = c(phi_w_tmp_sample_training, phi_w_tmp_training)
phi_v_sp_sample_training = c(phi_v_sp_sample_training, phi_v_sp_training)
phi_v_tmp_sample_training = c(phi_v_tmp_sample_training, phi_v_tmp_training)
t_0_sample_training = c(t_0_sample_training, t_0_training)
}
}
if (i %% 2500 == 0) {
save(beta_sample_chains_list_training, beta_star_sample_chains_list_training,
t0_sample_chains_list_training, converged_i,
file=paste(countyname, i, "iters.Rdata", sep = ""))
}
if (i > 3) {
break
}
i = i+1
}
}
save(beta_sample_chains_list_training, beta_star_sample_chains_list_training,
t0_sample_chains_list_training, converged_i,
file=paste(countyname, i, "iters.Rdata", sep = ""))
#time analysis
# avg_tt_v = total_tt_v/(i)
# avg_tt_beta = total_tt_beta/(i)
# #avg_tt_sigma_w_sq = total_tt_sigma_w_sq/(i)
# avg_tt_sigma_eps_sq = total_tt_sigma_eps_sq/(i)
# avg_tt_delta = total_tt_delta/(i)
# avg_tt_pi = total_tt_pi/(i)
# avg_tt_t_0 = total_tt_t_0/(i)
#
# sum(avg_tt_v,avg_tt_beta, avg_tt_sigma_w_sq, avg_tt_sigma_eps_sq, avg_tt_delta, avg_tt_pi, avg_tt_t_0)
# #estimation of y with the posterior parameters
# # estimated_pi_training = X_mat_pre_changepoint_training %*% rowMeans(beta_sample_training) +
# #   rowMeans(v_sample_training) + rnorm(n_total_training,mean = 0, sd= sqrt(mean(sigma_eps_sq_sample_training)))
# #
# # estimated_pi_star_training = X_mat_post_changepoint_training %*% rowMeans(beta_star_sample_training) +
# #   rowMeans(v_star_sample_training) + rnorm(n_total_training,mean = 0, sd= sqrt(mean(sigma_eps_sq_star_sample_training)))
#
# #####################################################################################################
#
# training_df_clone$pi_vec_est = rowMeans(pi_vec_sample_training)
#
# mean_delta_training = rowMeans(delta_sample_training)
#
# training_df_clone = training_df_clone %>%
#   mutate(pred_category = ifelse(pi_vec_est > mean_delta_training[4],4,
#                                 ifelse(pi_vec_est > mean_delta_training[3], 3,
#                                        ifelse(pi_vec_est > mean_delta_training[2],2,1))))
# pred_category = training_df_clone$pred_category
#
# pred_category_mat = cbind(pred_category_mat, pred_category)
#
# accuracy_pred = sum(training_df_clone$category == training_df_clone$pred_category)/n_total_training
#
# accuracy_pred_vec = c(accuracy_pred_vec, accuracy_pred)
# # mape_training = (sum(abs( (y_training - estimated_pi_training)/y_training )))/n_total_training
# # mape_vec_training_training = c(mape_vec_training_training, mape_training)
#
#
#
# #Testing for significance
# beta_significance_vec = vector()
# for (ts in (1:(p+1))) {
#   beta_significance_vec = c(beta_significance_vec,
#                             unname(!(0 >= quantile(beta_sample_training[ts,], 0.025) &
#                                        0 <= quantile(beta_sample_training[ts,], 0.975))))
# }
# beta_significance_mat_training = cbind(beta_significance_mat_training, beta_significance_vec)
#
# beta_star_significance_vec = vector()
# for (ts in (1:(p+1))) {
#   beta_star_significance_vec = c(beta_star_significance_vec,
#                                  unname(!(0 >= quantile(beta_star_sample_training[ts,], 0.025) &
#                                             0 <= quantile(beta_star_sample_training[ts,], 0.975))))
# }
# beta_star_significance_mat_training = cbind(beta_star_significance_mat_training,
#                                             beta_star_significance_vec)
#
#
#
# ###########################################################################################
#
# min_idx = which(mape_vec_validation_training == min(mape_vec_validation_training))
# if(min_idx %% length(rho_vec_sp_training) == 0){
#   phi_s = length(rho_vec_sp_training)
#   phi_t = min_idx/length(rho_vec_sp_training)
# }else{
#   phi_s = rho_vec_sp_training[min_idx %% length(rho_vec_sp_training)]
#   phi_t = rho_vec_tmp_training[floor(min_idx/length(rho_vec_sp_training)) + 1]
# }
# return(c(phi_s, phi_t))
#
# }
#
full_data <- read.csv("currentjoineddata.csv")
