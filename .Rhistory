before_vaccine$county <- gsub( ",.*$", "", before_vaccine$key)
colnames(before_vaccine)[26] = "Date"
before_vaccine <- before_vaccine[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
vaccine_county_df <- rbind(simple_data, before_vaccine)
albany <- vaccine_county_df[vaccine_county_df$county =='Albany',]
code <- nimbleCode({
betadeath ~ dnorm(0, sd = 200)
betavac ~ dnorm(0, sd = 200)
beta1time ~ dnorm(0, sd = 200)
beta2time ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
for(i in 1:n){
mu[i] <- U[i] + betavac * vac[i] + betadeath * deaths[i] +
(beta1time * t[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2time * t[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
y[i] ~ dnorm(mu[i], sd = sigma)
}
})
# Setting Values
albany <- albany[order(albany$time), ]
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
t <- albany$time
deaths <- albany$prev_log_new_death
vac <- albany$Administered_Dose1_Pop_Pct
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(deaths = deaths, t = t, vac = vac, y = y)
inits <- list(beta1time = 2, beta2time = 2,
betadeath = 2,betavac = 2,
tau = 10.1, sigma=1,
phiU = 1, phiW = 1, phiV = 1,
U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 2, niter = 10000,thin=2,
summary = TRUE,
monitors = c("betadeath",
"beta1time", "beta2time",
"betavac",
"tau", "phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
capture.output(mcmc.out$summary, file = "Model_output2")
mcmc.chains <- mcmc(mcmc.out$samples)
mcmc.sims <- mcmc(as.matrix(mcmc.out$samples))
rhat = gelman.diag(mcmc.chains)
capture.output(rhat$psrf, file = "Model_gelman2")
capture.output(autocorr(mcmc.sims), file = "Model_autocorr2")
capture.output(mcmc.out$WAIC, file = "Model_WAIC2")
capture.output(raftery.diag(mcmc.sims), file = "Model_raftery2")
mcmc.sims
mcmc.sims[1, ]
phiU <- mcmc.sims[, 5]
phiV <- mcmc.sims[, 6]
phiW <- mcmc.sims[, 7]
mean((phiU - phiV) > 0)
mean((phiV - phiW) > 0)
mean((phiW - phiU) > 0)
mean((mcmc.sims[, 1] - mcmc.sims[, 2]) > 0)
mean((mcmc.sims[, 1] - mcmc.sims[, 2]) < 0)
library(MASS)
library(nimble, warn.conflicts = FALSE)
library(tidyverse)
library(lubridate)
library(coda)
old_data <- read.csv("joineddata.csv")
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
new_data$county <- gsub( " .*$", "", new_data$Recip_County)
simple_data <- new_data[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
# Combining with data that is before vaccines
initial_data$week <- as.Date(initial_data$week)
initial_data$year <- year(initial_data$week)
initial_data$date <- initial_data$week
before_vaccine <- initial_data[initial_data$date < "2020-12-20",]
before_vaccine$Administered_Dose1_Pop_Pct = 0
before_vaccine$county <- gsub( ",.*$", "", before_vaccine$key)
colnames(before_vaccine)[26] = "Date"
before_vaccine <- before_vaccine[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
vaccine_county_df <- rbind(simple_data, before_vaccine)
albany <- vaccine_county_df[vaccine_county_df$county =='Albany',]
code <- nimbleCode({
betadeath ~ dnorm(0, sd = 200)
betavac ~ dnorm(0, sd = 200)
beta1time ~ dnorm(0, sd = 200)
beta2time ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
for(i in 1:n){
mu[i] <- U[i] + betavac * vac[i] + betadeath * deaths[i] +
(beta1time * t[i] + U[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2time * t[i] + U[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
y[i] ~ dnorm(mu[i], sd = sigma)
}
})
# Setting Values
albany <- albany[order(albany$time), ]
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
t <- albany$time
deaths <- albany$prev_log_new_death
vac <- albany$Administered_Dose1_Pop_Pct
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(deaths = deaths, t = t, vac = vac, y = y)
inits <- list(beta1time = 2, beta2time = 2,
betadeath = 2,betavac = 2,
tau = 10.1, sigma=1,
phiU = 1,
U = mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 2, niter = 10000,thin=2,
summary = TRUE,
monitors = c("betadeath",
"beta1time", "beta2time",
"betavac",
"tau", "phiU"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
# Model Summary
capture.output(mcmc.out$summary, file = "Model_output2")
mcmc.chains <- mcmc(mcmc.out$samples)
mcmc.sims <- mcmc(as.matrix(mcmc.out$samples))
rhat = gelman.diag(mcmc.chains)
capture.output(rhat$psrf, file = "Model_gelman2")
capture.output(autocorr(mcmc.sims), file = "Model_autocorr2")
capture.output(mcmc.out$WAIC, file = "Model_WAIC2")
capture.output(raftery.diag(mcmc.sims), file = "Model_raftery2")
sim <- rnorm(n, mean = deaths, sd = 1)
sim
z <- rep(0, n)
for (i in 1:n) {
if (sim < -2) {
z[i] <- 1
}
else if (sim < 0) {
z[i] <- 2
}
else if (sim < 2) {
z[i] <- 3
}
else {
z[i] <- 4
}
}
z <- rep(0, n)
for (i in 1:n) {
if (sim[i] < -2) {
z[i] <- 1
}
else if (sim[i] < 0) {
z[i] <- 2
}
else if (sim[i] < 2) {
z[i] <- 3
}
else {
z[i] <- 4
}
}
z
plot(deaths, z)
plot(z, deaths)
plot(deaths, z)
library(MASS)
library(nimble, warn.conflicts = FALSE)
library(tidyverse)
library(lubridate)
library(coda)
old_data <- read.csv("joineddata.csv")
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
new_data$county <- gsub( " .*$", "", new_data$Recip_County)
simple_data <- new_data[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
# Combining with data that is before vaccines
initial_data$week <- as.Date(initial_data$week)
initial_data$year <- year(initial_data$week)
initial_data$date <- initial_data$week
before_vaccine <- initial_data[initial_data$date < "2020-12-20",]
before_vaccine$Administered_Dose1_Pop_Pct = 0
before_vaccine$county <- gsub( ",.*$", "", before_vaccine$key)
colnames(before_vaccine)[26] = "Date"
before_vaccine <- before_vaccine[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
vaccine_county_df <- rbind(simple_data, before_vaccine)
albany <- vaccine_county_df[vaccine_county_df$county =='Albany',]
code <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
albany <- albany[order(albany$time), ]
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
t <- albany$time
deaths <- albany$prev_log_new_death
vac <- albany$Administered_Dose1_Pop_Pct
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
sim <- rnorm(n, mean = deaths, sd = 1)
z <- rep(0, n)
for (i in 1:n) {
if (sim[i] < -2) {
z[i] <- 1
}
else if (sim[i] < 0) {
z[i] <- 2
}
else if (sim[i] < 2) {
z[i] <- 3
}
else {
z[i] <- 4
}
}
for(i in 1:n){
z2[i,z[i]] <- 1
}
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1death', "beta2death", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
mcmc.out$summary
z2 <- matrix(0, nrow = n, ncol = 4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
z2
library(MASS)
library(nimble, warn.conflicts = FALSE)
library(tidyverse)
library(lubridate)
library(coda)
old_data <- read.csv("joineddata.csv")
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
new_data$county <- gsub( " .*$", "", new_data$Recip_County)
simple_data <- new_data[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
# Combining with data that is before vaccines
initial_data$week <- as.Date(initial_data$week)
initial_data$year <- year(initial_data$week)
initial_data$date <- initial_data$week
before_vaccine <- initial_data[initial_data$date < "2020-12-20",]
before_vaccine$Administered_Dose1_Pop_Pct = 0
before_vaccine$county <- gsub( ",.*$", "", before_vaccine$key)
colnames(before_vaccine)[26] = "Date"
before_vaccine <- before_vaccine[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
vaccine_county_df <- rbind(simple_data, before_vaccine)
albany <- vaccine_county_df[vaccine_county_df$county =='Albany',]
code <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- 0
gam[2] <- 5
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
albany <- albany[order(albany$time), ]
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
t <- albany$time
deaths <- albany$prev_log_new_death
vac <- albany$Administered_Dose1_Pop_Pct
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
sim <- rnorm(n, mean = deaths, sd = 1)
z <- rep(0, n)
for (i in 1:n) {
if (sim[i] < -2) {
z[i] <- 1
}
else if (sim[i] < 0) {
z[i] <- 2
}
else if (sim[i] < 2) {
z[i] <- 3
}
else {
z[i] <- 4
}
}
z2 <- matrix(0, nrow = n, ncol = 4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1death', "beta2death", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
mcmc.out$summary
library(MASS)
library(nimble, warn.conflicts = FALSE)
library(tidyverse)
library(lubridate)
library(coda)
old_data <- read.csv("joineddata.csv")
initial_data <- read.csv("US_COVID_weekly_NY_data.csv")
new_data$county <- gsub( " .*$", "", new_data$Recip_County)
simple_data <- new_data[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
# Combining with data that is before vaccines
initial_data$week <- as.Date(initial_data$week)
initial_data$year <- year(initial_data$week)
initial_data$date <- initial_data$week
before_vaccine <- initial_data[initial_data$date < "2020-12-20",]
before_vaccine$Administered_Dose1_Pop_Pct = 0
before_vaccine$county <- gsub( ",.*$", "", before_vaccine$key)
colnames(before_vaccine)[26] = "Date"
before_vaccine <- before_vaccine[c("Date", "time", "population", "Administered_Dose1_Pop_Pct",
"prev_log_new_death", "new_cases_per_100k", "category", "county")]
vaccine_county_df <- rbind(simple_data, before_vaccine)
albany <- vaccine_county_df[vaccine_county_df$county =='Albany',]
code <- nimbleCode({
beta1death ~ dnorm(0, sd = 200)
beta2death ~ dnorm(0, sd = 200)
tau ~ dunif(10, 90)
sigma ~ dgamma(2, 0.5)
phiU ~ dgamma(2, 2)
phiW ~ dgamma(2,2)
phiV ~ dgamma(2,2)
cholU[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiU))
cholW[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiW))
cholV[1:n,1:n] <- chol(exp(-distmat[1:n,1:n]/phiV))
U[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholU[1:n,1:n], prec_param = 0)
W[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholW[1:n,1:n], prec_param = 0)
V[1:n] ~ dmnorm(mu_zero[1:n], cholesky = cholV[1:n,1:n], prec_param = 0)
alpha3 ~ dnorm(0,3)
alpha4 ~ dnorm(0,3)
gam[1] <- -9999999
gam[2] <- 0
gam[3] <- exp(alpha3)
gam[4] <- gam[3] + exp(alpha4)
gam[5] <- 99999999
for(i in 1:n){
mu[i] <- U[i] +
(beta1death * deaths[i] + V[i]) *
((tau-i) + abs(tau-i)) / (2 * (tau-i)) +
(beta2death * deaths[i] + W[i]) *
((i-tau) + abs(i-tau)) / (2 * (i-tau))
z[i,] ~ dmulti(psi[i,1:4], size=1)
for(j in 1:4){
psi[i,j] <- iprobit((gam[j+1]-mu[i]) / sigma) - iprobit((gam[j]-mu[i]) / sigma)
}
}
})
# Setting Values
albany <- albany[order(albany$time), ]
n <- dim(albany)[1]
y <- albany$new_cases_per_100k
t <- albany$time
deaths <- albany$prev_log_new_death
vac <- albany$Administered_Dose1_Pop_Pct
mu_zero <- rep(0, n)
distmat <- as.matrix(dist(1:n))
sim <- rnorm(n, mean = deaths, sd = 1)
z <- rep(0, n)
for (i in 1:n) {
if (sim[i] < -2) {
z[i] <- 1
}
else if (sim[i] < 0) {
z[i] <- 2
}
else if (sim[i] < 2) {
z[i] <- 3
}
else {
z[i] <- 4
}
}
z2 <- matrix(0, nrow = n, ncol = 4)
for(i in 1:n){
z2[i,z[i]] <- 1
}
constants <- list(n = n,  mu_zero = mu_zero, distmat = distmat)
data <- list(z = z2, deaths = deaths)
betainit <- c(solve(t(t)%*%t)%*%t(t)%*%y)
inits <- list(beta1death = 2, beta2death = 2,
tau = 10.1, sigma=1, alpha3 = 3, alpha4 = 4,
phiU = 1, phiW = 1, phiV = 1, U = mu_zero, W=mu_zero, V=mu_zero)
model <- nimbleModel(code, constants = constants, data = data, inits = inits)
# Compile Model, run MCMC
cmodel = compileNimble(model)
mcmc.out <- nimbleMCMC(code = code, constants = constants,
data = data, inits = inits, nburnin=2000,
nchains = 1, niter = 10000,thin=2,
summary = TRUE,
monitors = c('beta1death', "beta2death", "alpha3","alpha4", "tau",
"phiU", "phiV", "phiW"),
samplesAsCodaMCMC = TRUE,
WAIC = TRUE)
mcmc.out$summary
z2
?dmulti
1588 / 60
plot(t, y)
plot(t, y)
abline(h = .43)
plot(t, y)
abline(v = .43)
